- model: blawx.ruledoc
  pk: 1
  fields:
    ruledoc_name: New Bird Act
    rule_text: "New Bird Act\r\n\r\n1. Penguins are birds.\r\n2. Birds fly.\r\n3.
      Despite 2, penguins do not fly, subject to 4.\r\n4. Penguins on planes can fly.\r\n5.
      Despite 3, cartoon penguins with jetpacks can fly.\r\n6. Section 5 does not
      apply to pingu."
    scasp_encoding: ''
    tutorial: ''
    owner: 3
    published: false
- model: blawx.workspace
  pk: 1
  fields:
    ruledoc: 1
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 2
  fields:
    ruledoc: 1
    workspace_name: sec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="MvMtMeJ0mqn*i{:E;Zn$" x="34" y="36"><statement name="statements"><block
      type="new_category_declaration" id="L6vr/MZu;6bmAfv,ieu8"><field name="category_name">penguin</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a penguin</field><next><block type="new_category_declaration" id="D`4Fy:Lz*n6N6y,xs|9B"><field
      name="category_name">bird</field><field name="prefix"></field><field name="first_element">object</field><field
      name="postfix">is a bird</field></block></next></block></statement></block><block
      type="attributed_rule" id="o}!?OZ`0Oi:(j~Y*R9Q9" x="37" y="229"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="B7u#RUug`]%N;BdK-lpQ"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="penguin"></mutation><field
      name="category_name">penguin</field><value name="object"><block type="variable"
      id="[zoF9~XEhRv7^::mMu+;"><field name="variable_name">A</field></block></value></block></statement><value
      name="source"><block type="doc_selector" id="kG#Ag7g[#8TlXeT.~Q/D"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1_section"></mutation><field
      name="doc_part_name">NBA 1</field></block></value><statement name="conclusion"><block
      type="new_object_category" id="nHeb4Q`lsNIR:z(I{XN1"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="bird"></mutation><field name="category_name">bird</field><value
      name="object"><block type="variable" id="_,4gLp7)bp@*$^y`LyWb"><field name="variable_name">A</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_category(penguin).

      blawx_category_nlg(penguin,"","is a penguin").

      #pred penguin(X) :: ''@(X) is a penguin''.

      #pred holds(user,penguin,X) :: ''it is provided as a fact that @(X) is a penguin''.

      #pred holds(user,-penguin,X) :: ''it is provided as a fact that it is not the
      case that @(X) is a penguin''.

      #pred holds(Z,penguin,X) :: ''the conclusion in @(Z) that @(X) is a penguin
      holds''.

      #pred holds(Z,-penguin,X) :: ''the conclusion in @(Z) that it is not the case
      that @(X) is a penguin holds''.

      #pred according_to(Z,penguin,X) :: ''according to @(Z), @(X) is a penguin''.

      #pred according_to(Z,-penguin,X) :: ''according to @(Z), it is not the case
      that @(X) is a penguin''.

      #pred blawx_defeated(Z,penguin,X) :: ''the conclusion in @(Z) that @(X) is a
      penguin is defeated''.

      #pred blawx_defeated(Z,-penguin,X) :: ''the conclusion in @(Z) that @(X) is
      a penguin is defeated''.

      penguin(X) :- holds(_,penguin,X).

      -penguin(X) :- holds(_,-penguin,X).

      blawx_category(bird).

      blawx_category_nlg(bird,"","is a bird").

      #pred bird(X) :: ''@(X) is a bird''.

      #pred holds(user,bird,X) :: ''it is provided as a fact that @(X) is a bird''.

      #pred holds(user,-bird,X) :: ''it is provided as a fact that it is not the case
      that @(X) is a bird''.

      #pred holds(Z,bird,X) :: ''the conclusion in @(Z) that @(X) is a bird holds''.

      #pred holds(Z,-bird,X) :: ''the conclusion in @(Z) that it is not the case that
      @(X) is a bird holds''.

      #pred according_to(Z,bird,X) :: ''according to @(Z), @(X) is a bird''.

      #pred according_to(Z,-bird,X) :: ''according to @(Z), it is not the case that
      @(X) is a bird''.

      #pred blawx_defeated(Z,bird,X) :: ''the conclusion in @(Z) that @(X) is a bird
      is defeated''.

      #pred blawx_defeated(Z,-bird,X) :: ''the conclusion in @(Z) that @(X) is a bird
      is defeated''.

      bird(X) :- holds(_,bird,X).

      -bird(X) :- holds(_,-bird,X).


      according_to(sec_1_section,bird,A) :- penguin(A).


      holds(sec_1_section,bird,A) :- according_to(sec_1_section,bird,A).'
- model: blawx.workspace
  pk: 3
  fields:
    ruledoc: 1
    workspace_name: sec_2_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="ItYET)m_mf?H}SyD;cbj" x="26" y="33"><statement name="statements"><block
      type="new_category_declaration" id="U_Y_lQ54#M}WL|*sd^-H"><field name="category_name">thing</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a thing</field><next><block type="new_attribute_declaration" id="y$vE?)Eo#50#K_4}9}+#"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="thing" attribute_type="boolean"></mutation><field
      name="category_name">thing</field><field name="attribute_name">flies</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">can fly</field></block></next></block></statement></block><block
      type="attributed_rule" id="RC1Ru_^~iY;[ml0WDxK2" x="74" y="246"><field name="defeasible">TRUE</field><field
      name="inapplicable">TRUE</field><statement name="conditions"><block type="new_object_category"
      id="8}tx{lQEg+guu[DG(cWZ"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="bird"></mutation><field
      name="category_name">bird</field><value name="object"><block type="variable"
      id="fjBMjMmV/5PWMMCQn:1M"><field name="variable_name">A</field></block></value></block></statement><value
      name="source"><block type="doc_selector" id="%rs2lzmI12k0?794Bp[K"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_2_section"></mutation><field
      name="doc_part_name">NBA 2</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="p8.]l9rzShwwGOLr}OkE"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="flies" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">can fly</field><value name="first_element"><block type="variable"
      id="o-gjbodYmwPO!07WL@nw"><field name="variable_name">A</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_category(thing).

      blawx_category_nlg(thing,"","is a thing").

      #pred thing(X) :: ''@(X) is a thing''.

      #pred holds(user,thing,X) :: ''it is provided as a fact that @(X) is a thing''.

      #pred holds(user,-thing,X) :: ''it is provided as a fact that it is not the
      case that @(X) is a thing''.

      #pred holds(Z,thing,X) :: ''the conclusion in @(Z) that @(X) is a thing holds''.

      #pred holds(Z,-thing,X) :: ''the conclusion in @(Z) that it is not the case
      that @(X) is a thing holds''.

      #pred according_to(Z,thing,X) :: ''according to @(Z), @(X) is a thing''.

      #pred according_to(Z,-thing,X) :: ''according to @(Z), it is not the case that
      @(X) is a thing''.

      #pred blawx_defeated(Z,thing,X) :: ''the conclusion in @(Z) that @(X) is a thing
      is defeated''.

      #pred blawx_defeated(Z,-thing,X) :: ''the conclusion in @(Z) that @(X) is a
      thing is defeated''.

      thing(X) :- holds(_,thing,X).

      -thing(X) :- holds(_,-thing,X).

      blawx_attribute(thing,flies,boolean).

      blawx_attribute_nlg(flies,not_applicable,"",not_applicable,"can fly").

      #pred flies(X) :: ''@(X) can fly''.

      #pred holds(user,flies,X) :: ''it is provided as a fact that @(X) can fly''.

      #pred holds(user,-flies,X) :: ''it is provided as a fact that it is not the
      case that @(X) can fly''.

      #pred holds(Z,flies,X) :: ''the conclusion in @(Z) that @(X) can fly holds''.

      #pred holds(Z,-flies,X) :: ''the conclusion in @(Z) that it is not the case
      that @(X) can fly holds''.

      #pred according_to(Z,flies,X) :: ''according to @(Z), @(X) can fly''.

      #pred according_to(Z,-flies,X) :: ''according to @(Z), it is not the case that
      @(X) can fly''.

      #pred blawx_defeated(Z,flies,X) :: ''the conclusion in @(Z) that @(X) can fly
      is defeated''.

      #pred blawx_defeated(Z,-flies,X) :: ''the conclusion in @(Z) that @(X) can fly
      is defeated''.

      flies(X) :- holds(_,flies,X).

      -flies(X) :- holds(_,-flies,X).


      according_to(sec_2_section,flies,A) :- blawx_applies(sec_2_section,A),

      bird(A).


      holds(sec_2_section,flies,A) :- according_to(sec_2_section,flies,A), not blawx_defeated(sec_2_section,flies,A).'
- model: blawx.workspace
  pk: 4
  fields:
    ruledoc: 1
    workspace_name: sec_3_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="@4MDfrxCbw[9swv2l=%d" x="186" y="8"><statement name="statements"><block
      type="overrules" id="?G|!D$CX~FX4]BcfhkMQ"><value name="defeating_rule"><block
      type="doc_selector" id="ujIsX]XJkz~3.V=a0_n#"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3_section"></mutation><field name="doc_part_name">NBA
      3</field></block></value><statement name="defeating_statement"><block type="logical_negation"
      id="Oi`jal[5B:J[x~7GcUt5"><statement name="negated_statement"><block type="unary_attribute_selector"
      id="t{hvjf4aciN24(EM3ekW"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">can
      fly</field><value name="first_element"><block type="variable" id="Lc831C}NcF@mH^@x+NAA"><field
      name="variable_name">A</field></block></value></block></statement></block></statement><value
      name="defeated_rule"><block type="doc_selector" id="(M?$Vy:GE8-M/A#luqS7"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_2_section"></mutation><field
      name="doc_part_name">NBA 2</field></block></value><statement name="defeated_statement"><block
      type="unary_attribute_selector" id=".gP*t36CQH73vv;k7;St"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="flies" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">can fly</field><value name="first_element"><block type="variable"
      id="Wf`#(^zW|pQ|A]8vmE9G"><field name="variable_name">A</field></block></value></block></statement></block></statement></block><block
      type="unattributed_fact" id="Y)ewQEyl|!%8@XeMM`bl" x="526" y="22"><statement
      name="statements"><block type="overrules" id="ARE9]qA?cgc6)zv3?E/m"><value name="defeating_rule"><block
      type="doc_selector" id="KW~S49.W2-fG.*(/CQ=_"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_4_section"></mutation><field name="doc_part_name">NBA
      4</field></block></value><statement name="defeating_statement"><block type="unary_attribute_selector"
      id="cmxM|7q!0o)zGEZ2B?69"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">can
      fly</field><value name="first_element"><block type="variable" id="G-tqBTM)pYA`I`N5=HNV"><field
      name="variable_name">A</field></block></value></block></statement><value name="defeated_rule"><block
      type="doc_selector" id="wnrGEn?.1~MlE*hC]@pm"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3_section"></mutation><field name="doc_part_name">NBA
      3</field></block></value><statement name="defeated_statement"><block type="logical_negation"
      id="l(TWuIC^!6Tu47nj7[F$"><statement name="negated_statement"><block type="unary_attribute_selector"
      id="FBk{r,@h=:`3]h{MlNdT"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">can
      fly</field><value name="first_element"><block type="variable" id="B=^-?9%Y7#^3Zi=(02n:"><field
      name="variable_name">A</field></block></value></block></statement></block></statement></block></statement></block><block
      type="unattributed_fact" id="{.QN|2x~=;biVI5;eo8E" x="172" y="273"><statement
      name="statements"><block type="new_attribute_declaration" id="+QgV,uctBUb84KUy(/dc"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="penguin" attribute_type="boolean"></mutation><field
      name="category_name">penguin</field><field name="attribute_name">on_plane</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">is on a plane</field></block></statement></block><block
      type="attributed_rule" id="G9-aAp)QdiNP``7Qi3!w" x="183" y="405"><field name="defeasible">TRUE</field><field
      name="inapplicable">TRUE</field><statement name="conditions"><block type="new_object_category"
      id="yQReq*ffm)NOM#0zbxw`"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="penguin"></mutation><field
      name="category_name">penguin</field><value name="object"><block type="variable"
      id="Z8S%MLX+[q/2wBG%^xTP"><field name="variable_name">A</field></block></value></block></statement><value
      name="source"><block type="doc_selector" id="K$;)s9A.!23gclpdue_X"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3_section"></mutation><field
      name="doc_part_name">NBA 3</field></block></value><statement name="conclusion"><block
      type="logical_negation" id="iEY#]Dw;^WV!@-X^LpJR"><statement name="negated_statement"><block
      type="unary_attribute_selector" id="nWFYCTDLr98=M|=6}Hpr"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="flies" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">can fly</field><value name="first_element"><block type="variable"
      id="v1;Xr]@Ute=9P;%zW7%/"><field name="variable_name">A</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_defeated(sec_2_section,flies,A) :- holds(sec_3_section,-flies,A).


      blawx_defeated(sec_3_section,-flies,A) :- holds(sec_4_section,flies,A).


      blawx_attribute(penguin,on_plane,boolean).

      blawx_attribute_nlg(on_plane,not_applicable,"",not_applicable,"is on a plane").

      #pred on_plane(X) :: ''@(X) is on a plane''.

      #pred holds(user,on_plane,X) :: ''it is provided as a fact that @(X) is on a
      plane''.

      #pred holds(user,-on_plane,X) :: ''it is provided as a fact that it is not the
      case that @(X) is on a plane''.

      #pred holds(Z,on_plane,X) :: ''the conclusion in @(Z) that @(X) is on a plane
      holds''.

      #pred holds(Z,-on_plane,X) :: ''the conclusion in @(Z) that it is not the case
      that @(X) is on a plane holds''.

      #pred according_to(Z,on_plane,X) :: ''according to @(Z), @(X) is on a plane''.

      #pred according_to(Z,-on_plane,X) :: ''according to @(Z), it is not the case
      that @(X) is on a plane''.

      #pred blawx_defeated(Z,on_plane,X) :: ''the conclusion in @(Z) that @(X) is
      on a plane is defeated''.

      #pred blawx_defeated(Z,-on_plane,X) :: ''the conclusion in @(Z) that @(X) is
      on a plane is defeated''.

      on_plane(X) :- holds(_,on_plane,X).

      -on_plane(X) :- holds(_,-on_plane,X).


      according_to(sec_3_section,-flies,A) :- blawx_applies(sec_3_section,A),

      penguin(A).


      holds(sec_3_section,-flies,A) :- according_to(sec_3_section,-flies,A), not blawx_defeated(sec_3_section,-flies,A).'
- model: blawx.workspace
  pk: 5
  fields:
    ruledoc: 1
    workspace_name: sec_4_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="attributed_rule"
      id=")~:=Pi`eXz2D,;o/xUcQ" x="124" y="167"><field name="defeasible">TRUE</field><field
      name="inapplicable">TRUE</field><statement name="conditions"><block type="new_object_category"
      id="]G?ghzNvy*PRTFP$I)ZF"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="penguin"></mutation><field
      name="category_name">penguin</field><value name="object"><block type="variable"
      id="uP,;^UpNX,!uTTPG/Cfl"><field name="variable_name">A</field></block></value><next><block
      type="unary_attribute_selector" id="A;uH,M$~tC+%W8_5g6D_"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="on_plane" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is on a plane</field><value name="first_element"><block type="variable"
      id="Dg@aJp]au)@3@:=PmxUn"><field name="variable_name">A</field></block></value></block></next></block></statement><value
      name="source"><block type="doc_selector" id="m6E2}@WQl#!}Qh[FVK3:"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4_section"></mutation><field
      name="doc_part_name">NBA 4</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="(~UeWN%R2~xs~@hD,CF,"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="flies" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">can fly</field><value name="first_element"><block type="variable"
      id="a7nx/G9)+yz/j*aglTls"><field name="variable_name">A</field></block></value></block></statement></block></xml>
    scasp_encoding: 'according_to(sec_4_section,flies,A) :- blawx_applies(sec_4_section,A),

      penguin(A),

      on_plane(A).


      holds(sec_4_section,flies,A) :- according_to(sec_4_section,flies,A), not blawx_defeated(sec_4_section,flies,A).'
- model: blawx.workspace
  pk: 6
  fields:
    ruledoc: 1
    workspace_name: sec_5_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="QK_uJ1D.sW7{#Zd91B,_" x="37" y="10"><statement name="statements"><block
      type="new_attribute_declaration" id=",^/GptnRSLYDTXY-AaOG"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="penguin" attribute_type="boolean"></mutation><field name="category_name">penguin</field><field
      name="attribute_name">cartoon_jetpack</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">is a cartoon with a jetpack</field></block></statement></block><block
      type="unattributed_fact" id="eft3plT!LfC@E[RN}9Rf" x="21" y="152"><statement
      name="statements"><block type="overrules" id="J[R9F-3Phi;i}!Z|B8]^"><value name="defeating_rule"><block
      type="doc_selector" id=":VSj8.#H:EF,?P$dIsI^"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_5_section"></mutation><field name="doc_part_name">NBA
      5</field></block></value><statement name="defeating_statement"><block type="unary_attribute_selector"
      id="LQie3q}S,Y1y-pMhy80)"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">can
      fly</field><value name="first_element"><block type="variable" id="B%][x4aFQ`q7_l{52yLp"><field
      name="variable_name">A</field></block></value></block></statement><value name="defeated_rule"><block
      type="doc_selector" id="H@S=KiYft*1aDbSOiA~6"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3_section"></mutation><field name="doc_part_name">NBA
      3</field></block></value><statement name="defeated_statement"><block type="logical_negation"
      id="kJ9L.1Dv!oNR!|[IDpf,"><statement name="negated_statement"><block type="unary_attribute_selector"
      id="o!7:6DCygt208j:[!%Ao"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">can
      fly</field><value name="first_element"><block type="variable" id="O6T_m*}IiPXA=]@,NdN#"><field
      name="variable_name">A</field></block></value></block></statement></block></statement></block></statement></block><block
      type="attributed_rule" id=";Q_HRbjjwum6k4[=WY4*" x="35" y="421"><field name="defeasible">TRUE</field><field
      name="inapplicable">TRUE</field><statement name="conditions"><block type="new_object_category"
      id="(GQq6#Q3BnMYPi|G{x!."><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="penguin"></mutation><field
      name="category_name">penguin</field><value name="object"><block type="variable"
      id="JJ0;k]/i2XD4A{VGAim}"><field name="variable_name">A</field></block></value><next><block
      type="unary_attribute_selector" id="[H][2n9T}-2Gwv}NcEKJ"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="cartoon_jetpack" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is a cartoon with a jetpack</field><value name="first_element"><block
      type="variable" id="A2iy/wLS!XfSFdU9`1:v"><field name="variable_name">A</field></block></value></block></next></block></statement><value
      name="source"><block type="doc_selector" id="%@`bV*kB+RKQ5[6ZilR{"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_5_section"></mutation><field
      name="doc_part_name">NBA 5</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="DyT*@mYWNijHjPZ~#/``"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="flies" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">can fly</field><value name="first_element"><block type="variable"
      id="Li;%rwP6]@i]EU?LeaVd"><field name="variable_name">A</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(penguin,cartoon_jetpack,boolean).

      blawx_attribute_nlg(cartoon_jetpack,not_applicable,"",not_applicable,"is a cartoon
      with a jetpack").

      #pred cartoon_jetpack(X) :: ''@(X) is a cartoon with a jetpack''.

      #pred holds(user,cartoon_jetpack,X) :: ''it is provided as a fact that @(X)
      is a cartoon with a jetpack''.

      #pred holds(user,-cartoon_jetpack,X) :: ''it is provided as a fact that it is
      not the case that @(X) is a cartoon with a jetpack''.

      #pred holds(Z,cartoon_jetpack,X) :: ''the conclusion in @(Z) that @(X) is a
      cartoon with a jetpack holds''.

      #pred holds(Z,-cartoon_jetpack,X) :: ''the conclusion in @(Z) that it is not
      the case that @(X) is a cartoon with a jetpack holds''.

      #pred according_to(Z,cartoon_jetpack,X) :: ''according to @(Z), @(X) is a cartoon
      with a jetpack''.

      #pred according_to(Z,-cartoon_jetpack,X) :: ''according to @(Z), it is not the
      case that @(X) is a cartoon with a jetpack''.

      #pred blawx_defeated(Z,cartoon_jetpack,X) :: ''the conclusion in @(Z) that @(X)
      is a cartoon with a jetpack is defeated''.

      #pred blawx_defeated(Z,-cartoon_jetpack,X) :: ''the conclusion in @(Z) that
      @(X) is a cartoon with a jetpack is defeated''.

      cartoon_jetpack(X) :- holds(_,cartoon_jetpack,X).

      -cartoon_jetpack(X) :- holds(_,-cartoon_jetpack,X).


      blawx_defeated(sec_3_section,-flies,A) :- holds(sec_5_section,flies,A).


      according_to(sec_5_section,flies,A) :- blawx_applies(sec_5_section,A),

      penguin(A),

      cartoon_jetpack(A).


      holds(sec_5_section,flies,A) :- according_to(sec_5_section,flies,A), not blawx_defeated(sec_5_section,flies,A).'
- model: blawx.workspace
  pk: 7
  fields:
    ruledoc: 1
    workspace_name: sec_6_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="~5Jjg+_O-eBwgLF1T9n;" x="34" y="51"><statement name="statements"><block
      type="object_declaration" id=",`l9FVEcoN)KX2sH}o%_"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="penguin" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">pingu</field><field name="postfix">is a penguin</field><next><block
      type="logical_negation" id="N/#|u11X2qZ/Va3,~dhs"><statement name="negated_statement"><block
      type="applies" id="b{Um]+x/1fn,*(jgeK#A"><value name="applicable_rule"><block
      type="doc_selector" id="V]n7Up3`$(^sq+#.{=@e"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_5_section"></mutation><field name="doc_part_name">NBA
      5</field></block></value><value name="object"><block type="object_selector"
      id=";|YvD[;b4grR+1*AD/)@"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="pingu"></mutation><field
      name="object_name">pingu</field></block></value></block></statement></block></next></block></statement></block></xml>
    scasp_encoding: 'penguin(pingu).

      -blawx_applies(sec_5_section,pingu).'
- model: blawx.blawxtest
  pk: 1
  fields:
    ruledoc: 1
    test_name: is_pingu_a_bird
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="{XGO7Y5OaO`rd@~?+`}L" x="215" y="157"><comment pinned="false" h="113.59999084472656"
      w="395.1999816894531">The rule in section 1 holds, indefeasibly.</comment><statement
      name="query"><block type="new_object_category" id="!9Zh~+;|;6gmGL~w`VAQ"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="bird"></mutation><field
      name="category_name">bird</field><value name="object"><block type="variable"
      id="X}s+nD%e!SrDt$Twad#V"><field name="variable_name">A</field></block></value></block></statement></block></xml>
    scasp_encoding: '% The rule in section 1 holds, indefeasibly.

      ?- bird(A).'
    tutorial: ''
    view: ''
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 2
  fields:
    ruledoc: 1
    test_name: pingu_cant_fly
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="*j;b+NcSPilRk(])y9a6" x="148" y="192"><comment pinned="false" h="124.79995727539062"
      w="352.800048828125">Section 2 defeasibly concludes that pingu can fly, because
      he is bird according to section 1, because he is a penguin. That conclusion
      is defeated by section 3.</comment><statement name="query"><block type="default_negation"
      id="e:AHMR56q#wy*xHv9-X`"><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id="WC2t8NTW|(Mt/Z;)/!8?"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="flies" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">can fly</field><value name="first_element"><block type="object_selector"
      id="T1_=/Rfpol}@=aZ0OSfs"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="pingu"></mutation><field
      name="object_name">pingu</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: '% Section 2 defeasibly concludes that pingu can fly,

      % because he is bird according to section 1, because he

      % is a penguin. That conclusion is defeated by section 3.

      ?- not flies(pingu).'
    tutorial: ''
    view: ''
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 3
  fields:
    ruledoc: 1
    test_name: pingu_on_plane_can_fly
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="YfJ(d2a:@DHoQ~fcVLJq" x="99" y="89"><statement name="statements"><block
      type="unary_attribute_selector" id=",MkJoc[E!8[`EQm^lAXQ"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="on_plane" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is on a plane</field><value name="first_element"><block type="object_selector"
      id="d^.T:@wfMQzbeskKFNxV"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="pingu"></mutation><field
      name="object_name">pingu</field></block></value></block></statement></block><block
      type="query" id="sBc[P#(ST6I8cyH+Vs?C" x="97" y="214"><comment pinned="true"
      h="101" w="333">Pingu can fly, because section 2 applies, because section 3
      would defeat it, but section 4 defeats section 3. Also, section 4 applies on
      its own.</comment><statement name="query"><block type="unary_attribute_selector"
      id="IZ,3?Mum3jMC+hl*3}pf"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">can
      fly</field><value name="first_element"><block type="object_selector" id="e[-a[xS2{e=+E-xh%#p6"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="pingu"></mutation><field name="object_name">pingu</field></block></value></block></statement></block></xml>
    scasp_encoding: 'on_plane(pingu).


      % Pingu can fly, because section 2 applies, because

      % section 3 would defeat it, but section 4 defeats

      % section 3. Also, section 4 applies on its own.

      ?- flies(pingu).'
    tutorial: ''
    view: ''
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 4
  fields:
    ruledoc: 1
    test_name: pingu_with_jetpack_cant_fly
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="%wSHjBKYDWa=ZSd^~A^t" x="66" y="21"><statement name="statements"><block
      type="unary_attribute_selector" id="=ga!s!PzcRJYgFp$z8in"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="cartoon_jetpack" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is a cartoon with a jetpack</field><value name="first_element"><block
      type="object_selector" id="0Xa1Ae1?d_Umpu]F$3:~"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="pingu"></mutation><field name="object_name">pingu</field></block></value></block></statement></block><block
      type="query" id="0${V.+nr-0/ziJC+G8dP" x="62" y="255"><comment pinned="false"
      h="136.79994201660156" w="304.79998779296875">Pingu can't fly because section
      2 is defeated by section 3, which is not defeated by section 5 because it doesn't
      apply to pingu.</comment><statement name="query"><block type="default_negation"
      id="psV7o)uPf.cV1R_=JEW`"><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id="}_udeJ(/ad-)o0d?LlAr"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="flies" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">can fly</field><value name="first_element"><block type="object_selector"
      id="^drsgIdwR)2R9)gWp_(*"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="pingu"></mutation><field
      name="object_name">pingu</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'cartoon_jetpack(pingu).


      % Pingu can''t fly because section 2 is defeated by section 3, which

      % is not defeated by section 5 because it doesn''t apply to pingu.

      ?- not flies(pingu).'
    tutorial: ''
    view: ''
    fact_scenario: ''
