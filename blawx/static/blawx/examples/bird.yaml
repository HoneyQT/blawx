- model: blawx.ruledoc
  pk: 1
  fields:
    ruledoc_name: Bird Act
    rule_text: "Bird Act\r\n\r\n1. A Penguin is a Bird.\r\n2. If a thing is a bird,
      it flies, [penguin]{unless it is a penguin}."
    scasp_encoding: ''
    tutorial: ''
    owner: 3
    published: false
- model: blawx.workspace
  pk: 1
  fields:
    ruledoc: 1
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 2
  fields:
    ruledoc: 1
    workspace_name: sec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="L~1O4v;8gSt_vFKU[ms:" x="49" y="47"><statement name="statements"><block
      type="new_category_declaration" id="!7*tbuJ.OXTe/L=5$)G,"><field name="category_name">penguin</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a penguin</field><next><block type="new_category_declaration" id="zg7)dhKv=!}R~@LP43aA"><field
      name="category_name">bird</field><field name="prefix"></field><field name="first_element">object</field><field
      name="postfix">is a bird</field></block></next></block></statement></block><block
      type="unattributed_rule" id="IBmf1!~-wvBW0t}a-uBd" x="36" y="206"><statement
      name="conditions"><block type="new_object_category" id="M0:YnjWEFl[+8!]7l9L?"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="penguin"></mutation><field
      name="category_name">penguin</field><value name="object"><block type="variable"
      id="sO1+!cu+WP41Xik#cmAa"><field name="variable_name">A</field></block></value></block></statement><statement
      name="conclusion"><block type="new_object_category" id="/2k,MpEpy63|zO|}[+(1"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="bird"></mutation><field
      name="category_name">bird</field><value name="object"><block type="variable"
      id="Vv^Y;M~_ro_6i);^^IMX"><field name="variable_name">A</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_category(penguin).

      blawx_category_nlg(penguin,"","is a penguin").

      #pred penguin(X) :: ''@(X) is a penguin''.

      #pred according_to(R,penguin(X)) :: ''according to @(R), @(X) is a penguin''.

      #pred legally_holds(_,penguin(X)) :: ''it legally holds that @(X) is a penguin''.

      opposes(penguin(X,Y),-penguin(X,Y)).

      opposes(-penguin(X,Y),penguin(X,Y)).

      blawx_category(bird).

      blawx_category_nlg(bird,"","is a bird").

      #pred bird(X) :: ''@(X) is a bird''.

      #pred according_to(R,bird(X)) :: ''according to @(R), @(X) is a bird''.

      #pred legally_holds(_,bird(X)) :: ''it legally holds that @(X) is a bird''.

      opposes(bird(X,Y),-bird(X,Y)).

      opposes(-bird(X,Y),bird(X,Y)).


      bird(A) :-

      penguin(A).'
- model: blawx.workspace
  pk: 3
  fields:
    ruledoc: 1
    workspace_name: sec_2_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="XNdt3+VC`RGs((RZa:OR" x="44" y="64"><statement name="statements"><block
      type="new_category_declaration" id="J8A3._71x8aW=)j,86)3"><field name="category_name">thing</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a thing</field><next><block type="new_attribute_declaration" id="Xy0#SOEd7pAd+K$pA)dE"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="thing" attribute_type="boolean"></mutation><field
      name="category_name">thing</field><field name="attribute_name">flies</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">flies</field></block></next></block></statement></block><block
      type="unattributed_rule" id="57{]Jo[T!KH~;N4_vs3{" x="156" y="259"><statement
      name="conditions"><block type="new_object_category" id="~[0*My:AoAs;Y$lWm/6N"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="bird"></mutation><field
      name="category_name">bird</field><value name="object"><block type="variable"
      id="ja%swYDtncK`v!+srxR="><field name="variable_name">A</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id="Fj^KWHY[lKs/Tl#$snSY"><value
      name="rule"><block type="doc_selector" id="]#Y4EZ[@`4@pya,GDMGK"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_2_section"></mutation><field name="doc_part_name">BA
      2</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="VzKP:i4$Ph0hxmb+[cHb"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">flies</field><value
      name="first_element"><block type="variable" id="T%n#Pl7x}c(4n3`,Qf)N"><field
      name="variable_name">A</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_category(thing).

      blawx_category_nlg(thing,"","is a thing").

      #pred thing(X) :: ''@(X) is a thing''.

      #pred according_to(R,thing(X)) :: ''according to @(R), @(X) is a thing''.

      #pred legally_holds(_,thing(X)) :: ''it legally holds that @(X) is a thing''.

      opposes(thing(X,Y),-thing(X,Y)).

      opposes(-thing(X,Y),thing(X,Y)).

      blawx_attribute(thing,flies,boolean).

      blawx_attribute_nlg(flies,not_applicable,"",not_applicable,"flies").

      #pred flies(X) :: ''@(X) flies''.

      #pred according_to(R,flies(X)) :: ''according to @(R), @(X) flies''.

      #pred legally_holds(_,flies(X)) :: ''it legally holds that @(X) flies''.

      opposes(flies(X),-flies(X)).

      opposes(-flies(X),flies(X)).


      according_to(sec_2_section,  flies(A)) :-

      bird(A).'
- model: blawx.workspace
  pk: 4
  fields:
    ruledoc: 1
    workspace_name: sec_2__span_penguin_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="i^nWr-06Az5/;nVmX;?:" x="70" y="121"><statement name="statements"><block
      type="overrules" id="RgP$rvZ@Z).WFv@AvQ[^"><value name="defeating_rule"><block
      type="doc_selector" id="L=cQ.VpMq+~_Q@ag^UvN"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_2__span_penguin_section"></mutation><field name="doc_part_name">BA
      2penguin</field></block></value><value name="defeated_rule"><block type="doc_selector"
      id="5lFeZhKNE_;IVN.xeaUy"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_2_section"></mutation><field
      name="doc_part_name">BA 2</field></block></value></block></statement></block><block
      type="unattributed_rule" id="rwL@R.w``twMKN[JGTWN" x="25" y="228"><statement
      name="conditions"><block type="new_object_category" id="GGb61.kTLoQKNvRt-=Uh"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="penguin"></mutation><field
      name="category_name">penguin</field><value name="object"><block type="variable"
      id="m3%RbpNrRzT:{F|rFydZ"><field name="variable_name">A</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id="rS#i:9FF*9r^d`]c7ZO1"><value
      name="rule"><block type="doc_selector" id="gtx??z9J:0eQTdlP97VR"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_2__span_penguin_section"></mutation><field name="doc_part_name">BA
      2penguin</field></block></value><statement name="statement"><block type="logical_negation"
      id="k`6%l;c7ogMBP;}45Y_T"><statement name="negated_statement"><block type="unary_attribute_selector"
      id="+h!N98t)BVJuA`*g|ICK"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">flies</field><value
      name="first_element"><block type="variable" id=";2uI%eXyn;969wfv0|#Y"><field
      name="variable_name">A</field></block></value></block></statement></block></statement></block></statement></block></xml>
    scasp_encoding: 'overrules(sec_2__span_penguin_section,sec_2_section).


      according_to(sec_2__span_penguin_section,  -flies(A)) :-

      penguin(A).'
- model: blawx.blawxtest
  pk: 1
  fields:
    ruledoc: 1
    test_name: negation
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="~x|E/AunIA8exv1*|4wu" x="73" y="110"><statement name="statements"><block
      type="object_declaration" id="~X7PIJRl3][mP}Kj^GEx"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="penguin" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">tweety</field><field name="postfix">is a penguin</field></block></statement></block><block
      type="query" id="2r-ElB0SFhIPg/~QN)[3" x="114" y="250"><statement name="query"><block
      type="default_negation" id="U?_GEs(+}mM_tF;FcXV_"><statement name="default_negated_statement"><block
      type="holds" id="tb]yjbc=%sq@W/5M]2wW"><statement name="statement"><block type="unary_attribute_selector"
      id="!ee_YEn#0-P^$NdG7]?R"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">flies</field><value
      name="first_element"><block type="object_selector" id="}rHhyxXfQYG5N=jt_EM5"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="tweety"></mutation><field name="object_name">tweety</field></block></value></block></statement></block></statement></block></statement></block></xml>
    scasp_encoding: 'penguin(tweety).


      ?- not legally_holds(_,  flies(tweety)).'
    tutorial: ''
    view: ''
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 2
  fields:
    ruledoc: 1
    test_name: tweety
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="0[Zqs-3y=e}`dNc#5_h7" x="80" y="74"><statement name="statements"><block
      type="object_declaration" id="`.`1Vt@)m1z6Q~e9vl;D"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="penguin" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">tweety</field><field name="postfix">is a penguin</field></block></statement></block><block
      type="query" id="H3hq4W(+^nJ=cF*!!l,+" x="101" y="245"><statement name="query"><block
      type="holds" id="_,hLWpuSF`jVR@W7)F#3"><statement name="statement"><block type="unary_attribute_selector"
      id="54#y`fCXx6#SIsTtZ|B;"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">flies</field><value
      name="first_element"><block type="object_selector" id="+[6XLi0I.e/X%)$srZzl"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="tweety"></mutation><field name="object_name">tweety</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'penguin(tweety).


      ?- legally_holds(_,  flies(tweety)).'
    tutorial: ''
    view: ''
    fact_scenario: ''
