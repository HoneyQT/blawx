- model: blawx.ruledoc
  pk: 4
  fields:
    ruledoc_name: Old Age Security Act
    rule_text: "Old Age Security Act\r\n\r\nPayment of full pension\r\n3.\r\n  (1)
      Subject to this Act and the regulations, a full monthly pension may be paid
      to\r\n    (a) every person who was a pensioner on July 1, 1977;\r\n    (b) every
      person who\r\n      (i) on July 1, 1977 was not a pensioner but had attained
      twenty-five years of age and resided in Canada or, if that person did not reside
      in Canada, had resided in Canada for any period after attaining eighteen years
      of age or possessed a valid immigration visa,\r\n      (ii) has attained sixty-five
      years of age, and\r\n      (iii) has resided in Canada for the ten years immediately
      preceding the day on which that person's application is approved or, if that
      person has not so resided, has, after attaining eighteen years of age, been
      present in Canada prior to those ten years for an aggregate period at least
      equal to three times the aggregate periods of absence from Canada during those
      ten years, and has resided in Canada for at least one year immediately preceding
      the day on which that person's application is approved; and\r\n    (c) every
      person who\r\n      (i) was not a pensioner on July 1, 1977,\r\n      (ii) has
      attained sixty-five years of age, and\r\n      (iii) has resided in Canada after
      attaining eighteen years of age and prior to the day on which that person's
      application is approved for an aggregate period of at least forty years.\r\n\r\nResidence
      in Canada must be or have been legal\r\n4.\r\n  (1) A person who was not a pensioner
      on July 1, 1977 is eligible for a pension under this Part only if\r\n    (a)
      on the day preceding the day on which that person's application is approved
      that person is a Canadian citizen or, if not, is legally resident in Canada;
      or\r\n    (b) on the day preceding the day that person ceased to reside in Canada
      that person was a Canadian citizen or, if not, was legally resident in Canada."
    scasp_encoding: ''
    tutorial: ''
    owner: 3
    published: true
- model: blawx.workspace
  pk: 44
  fields:
    ruledoc: 4
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 45
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_a_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="c5vOdJSO[]Pdd}X[HUj}" x="58" y="52"><statement name="statements"><block
      type="new_category_declaration" id=".fvzZ,=;uDF-M7`bZ_lR"><field name="category_name">person</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a person</field><next><block type="new_attribute_declaration" id="v{eY1FpJdb@:n}:y,2Xq"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person" attribute_type="boolean"></mutation><field
      name="category_name">person</field><field name="attribute_name">pensioner_july</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">was a pensioner on
      July 1 1977</field></block></next></block></statement></block><block type="unattributed_rule"
      id="GB%P/vPu347%8m]YFPiY" x="56" y="286"><statement name="conditions"><block
      type="new_object_category" id="2d2vx#ZqPr~JZn1V]v}R"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person"></mutation><field name="category_name">person</field><value
      name="object"><block type="variable" id="V)Uz3V?-ykz|p-%G#rJ!"><field name="variable_name">Person</field></block></value><next><block
      type="unary_attribute_selector" id=",!)gkI]d^vW,!zs0L[+/"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="pensioner_july" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">was a pensioner on July 1 1977</field><value name="first_element"><block
      type="variable" id="BZ`1Ng]y(@lASqs_=YXA"><field name="variable_name">Person</field></block></value></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="cU#YSJTwC?]B_m2vNCIW"><value
      name="rule"><block type="doc_selector" id="zJWLvxFN.#ZU,+K%tR4V"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_a_section"></mutation><field name="doc_part_name">OASA
      3.1.a</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="=J,+JFg){%=Q`9K]JFz0"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="qualifies_s3_1_a"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">qualifies
      under s3(1)(a)</field><value name="first_element"><block type="variable" id="Y.,4$X*[JQJ9wavt$o3P"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_category(person).

      blawx_category_nlg(person,"","is a person").

      #pred person(X) :: ''@(X) is a person''.

      #pred according_to(R,person(X)) :: ''according to @(R), @(X) is a person''.

      #pred legally_holds(_,person(X)) :: ''it legally holds that @(X) is a person''.

      opposes(person(X,Y),-person(X,Y)).

      opposes(-person(X,Y),person(X,Y)).

      blawx_attribute(person,pensioner_july,boolean).

      blawx_attribute_nlg(pensioner_july,not_applicable,"",not_applicable,"was a pensioner
      on July 1 1977").

      #pred pensioner_july(X) :: ''@(X) was a pensioner on July 1 1977''.

      #pred according_to(R,pensioner_july(X)) :: ''according to @(R), @(X) was a pensioner
      on July 1 1977''.

      #pred legally_holds(_,pensioner_july(X)) :: ''it legally holds that @(X) was
      a pensioner on July 1 1977''.

      opposes(pensioner_july(X),-pensioner_july(X)).

      opposes(-pensioner_july(X),pensioner_july(X)).


      according_to(sec_3__subsec_1__para_a_section,  qualifies_s3_1_a(Person)) :-

      person(Person),

      pensioner_july(Person).'
- model: blawx.workspace
  pk: 46
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_b__subpara_i_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="SVKEzrr:KnIMpu8XNQYa" x="31" y="55"><statement name="statements"><block
      type="new_attribute_declaration" id="L+sBI`hqDT6uNi5~|Q1d"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="date"></mutation><field name="category_name">person</field><field
      name="attribute_name">birthdate</field><field name="attribute_type">date</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">was born on</field><field name="second_element">value</field><field
      name="postfix"></field><next><block type="new_attribute_declaration" id=":4%m*OfW}xVWRs%CB}ce"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person" attribute_type="boolean"></mutation><field
      name="category_name">person</field><field name="attribute_name">resided_in_canada_july</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix">as
      of July 1977</field><field name="first_element">object</field><field name="infix">'s
      attribute name is</field><field name="second_element">value</field><field name="postfix">resided
      in Canada</field><next><block type="new_attribute_declaration" id="JZy~-XR{MHA11n@_gF){"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person" attribute_type="boolean"></mutation><field
      name="category_name">person</field><field name="attribute_name">possessed_valid_immigration_visa_july</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix">as
      of July 1977</field><field name="first_element">object</field><field name="infix">'s
      attribute name is</field><field name="second_element">value</field><field name="postfix">possessed
      a valid immigration visa</field><next><block type="new_attribute_declaration"
      id="1s970BEwxSn-(8|OKik2"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">resided_in_canada_after_18_as_of_july</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix">as of July 1977</field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">had resided in Canada after 18 years of age</field></block></next></block></next></block></next></block></statement></block><block
      type="unattributed_rule" id="Kt#1e!X2hs4-uhVS])2=" x="39" y="427"><statement
      name="conditions"><block type="default_negation" id="?=2[+CVf@S`DG*3)M*bi"><statement
      name="default_negated_statement"><block type="unary_attribute_selector" id="ZXBQR3e3KwVW{n[-ccbr"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="pensioner_july" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">was a pensioner on July 1 1977</field><value
      name="first_element"><block type="variable" id="dpYc|vk@||@pzg#(!*FX"><field
      name="variable_name">Person</field></block></value></block></statement><next><block
      type="attribute_selector" id="#S[bUT];u)ny4.m33P~y"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="birthdate" attributetype="Calendar Date" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">was born on</field><field name="postfix"></field><value
      name="first_element"><block type="variable" id="?#co`sNBmyYPpXLrc|UR"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id=",)1TRJmNjf+{~U6utE)("><field name="variable_name">Birthdate</field></block></value><next><block
      type="date_add" id=";H;VVVVGZnOP-Yl=o_jP"><value name="duration"><block type="duration_value"
      id="Z8{y_fix3]zm=txa5RS$"><field name="sign">1</field><field name="years">25</field><field
      name="months">0</field><field name="days">0</field><field name="hours">0</field><field
      name="minutes">0</field><field name="seconds">0</field></block></value><value
      name="first_date"><block type="variable" id="Vvkx7nV=li4#I0B8-[qe"><field name="variable_name">Birthdate</field></block></value><value
      name="second_date"><block type="variable" id="c!,@YZIOT|U__kidqJd1"><field name="variable_name">DateAttaining25Years</field></block></value><next><block
      type="date_comparison" id="dj;`BJw2}oP*6P,(CBA#"><field name="comparison">lte</field><value
      name="first_date"><block type="variable" id="X:($pQ-/X0]U.Ie2|TaT"><field name="variable_name">DateAttaining25Years</field></block></value><value
      name="second_date"><block type="date_value" id="e/Yu#_PzqDbS3%[S#N3/"><field
      name="year">1977</field><field name="month">7</field><field name="day">1</field></block></value><next><block
      type="unary_attribute_selector" id="oo,Avob/Oxub0!U^6*y."><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="resided_in_canada_july" attributetype="boolean"></mutation><field
      name="prefix">as of July 1977</field><field name="postfix">resided in Canada</field><value
      name="first_element"><block type="variable" id="u8PFJ@n0gqK1F(;?^tF`"><field
      name="variable_name">Person</field></block></value></block></next></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="^Djj:VT!Zo|qPAtlxv}6"><value
      name="rule"><block type="doc_selector" id="#W[XeAbs{-aUgSF88)J("><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="=.WNw$yByk;-U.*F:Id="><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_requirement_s3_1_b_i" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence requirements
      of section 3(1)(b)(i)</field><value name="first_element"><block type="variable"
      id="JA%H~Gurj(+VisU`{r5~"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block><block
      type="unattributed_rule" id="OYK/x)sBZXsp2h8PWVW," x="40" y="777"><statement
      name="conditions"><block type="default_negation" id="M6y:@M)hM~kqxco}P?-k"><statement
      name="default_negated_statement"><block type="unary_attribute_selector" id="EP:uY]n;w}OxS0$+cx@~"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="pensioner_july" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">was a pensioner on July 1 1977</field><value
      name="first_element"><block type="variable" id="q+ZokY.{`$fCsbJR`Gbz"><field
      name="variable_name">Person</field></block></value></block></statement><next><block
      type="default_negation" id="jJa},,z^`Su)dm1OFh#X"><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id=";79EaT_Y;IBXl.)IDvs*"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="resided_in_canada_july" attributetype="boolean"></mutation><field
      name="prefix">as of July 1977</field><field name="postfix">resided in Canada</field><value
      name="first_element"><block type="variable" id="Zp%ZIiGTx=z;*3IT4uKH"><field
      name="variable_name">Person</field></block></value></block></statement><next><block
      type="attribute_selector" id="Obnv5tD1vPk%%Iz3RhE]"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="birthdate" attributetype="Calendar Date" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">was born on</field><field name="postfix"></field><value
      name="first_element"><block type="variable" id="TFYH-TCC4=IVB+!cPsV_"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="qCk+;|qI72okO6U58($8"><field name="variable_name">Birthdate</field></block></value><next><block
      type="date_add" id="1iV4S]s%,8N|}om46N61"><value name="duration"><block type="duration_value"
      id="R)3EwF5w9#*SJT+s=QjH"><field name="sign">1</field><field name="years">25</field><field
      name="months">0</field><field name="days">0</field><field name="hours">0</field><field
      name="minutes">0</field><field name="seconds">0</field></block></value><value
      name="first_date"><block type="variable" id="P!Q871NB1%v/dv=15bU9"><field name="variable_name">Birthdate</field></block></value><value
      name="second_date"><block type="variable" id="u~Yp^hz@t--li-R=I~Rf"><field name="variable_name">DateAttaining25Years</field></block></value><next><block
      type="date_comparison" id="AaupL;4uYShNsGA%[*WF"><field name="comparison">lte</field><value
      name="first_date"><block type="variable" id="C$t8(1S(N^!sXgIeR*KT"><field name="variable_name">DateAttaining25Years</field></block></value><value
      name="second_date"><block type="date_value" id="CQ+V)3gr)*z,;NxqyB:i"><field
      name="year">1977</field><field name="month">7</field><field name="day">1</field></block></value><next><block
      type="unary_attribute_selector" id="h@bHY2fKr^[^@4Q}(?Vv"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="possessed_valid_immigration_visa_july" attributetype="boolean"></mutation><field
      name="prefix">as of July 1977</field><field name="postfix">possessed a valid
      immigration visa</field><value name="first_element"><block type="variable" id="ck_UW`HW4E{#Z7Shf7Q8"><field
      name="variable_name">Person</field></block></value></block></next></block></next></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="aaA5{aH|[4=`njrA1`3)"><value
      name="rule"><block type="doc_selector" id="dMJS8+,Nedyi3WL=ZNiC"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="_sfF|pVucI7N;Ek?0*tH"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_requirement_s3_1_b_i" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence requirements
      of section 3(1)(b)(i)</field><value name="first_element"><block type="variable"
      id="W|5BjO)x@v}V6w6QVn61"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block><block
      type="unattributed_rule" id="cL(FhP5Dw`?2Aq_/^:+v" x="48" y="1225"><statement
      name="conditions"><block type="default_negation" id="@dA:QnaNGiUcyafK`Qn~"><statement
      name="default_negated_statement"><block type="unary_attribute_selector" id="H;u95kMrW`XnT(R-.g2D"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="pensioner_july" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">was a pensioner on July 1 1977</field><value
      name="first_element"><block type="variable" id="NWfE!RFcZdx{jCivQw^p"><field
      name="variable_name">Person</field></block></value></block></statement><next><block
      type="default_negation" id="N,q8EfCv%Cg]n2j;ihVa"><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id="rDux3eoxGqFn$659O3;:"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="resided_in_canada_july" attributetype="boolean"></mutation><field
      name="prefix">as of July 1977</field><field name="postfix">resided in Canada</field><value
      name="first_element"><block type="variable" id="xIp:j-%6[`WZ37zwbFi^"><field
      name="variable_name">Person</field></block></value></block></statement><next><block
      type="attribute_selector" id="atS~l6Wo9#5==~`%ait3"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="birthdate" attributetype="Calendar Date" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">was born on</field><field name="postfix"></field><value
      name="first_element"><block type="variable" id="2Z=yPjNu`{+0)+qSTupd"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="gq0;a,@Ib^jl}CkjPA)k"><field name="variable_name">Birthdate</field></block></value><next><block
      type="date_add" id="TFZ%`9`OQ:w2i+#m9Zh{"><value name="duration"><block type="duration_value"
      id="n}3-KsdBo=%gbhhE_l6s"><field name="sign">1</field><field name="years">25</field><field
      name="months">0</field><field name="days">0</field><field name="hours">0</field><field
      name="minutes">0</field><field name="seconds">0</field></block></value><value
      name="first_date"><block type="variable" id="9hd:3nd$mE7K#C|W:.qN"><field name="variable_name">Birthdate</field></block></value><value
      name="second_date"><block type="variable" id="2wu)@!e%n+URPt=g{N6I"><field name="variable_name">DateAttaining25Years</field></block></value><next><block
      type="date_comparison" id="!b`}+zANOfV}qo9{2PJ*"><field name="comparison">lte</field><value
      name="first_date"><block type="variable" id="-`1.mYyNWl~w)(Y+$e%2"><field name="variable_name">DateAttaining25Years</field></block></value><value
      name="second_date"><block type="date_value" id="x#0{g:H(b}N%Q6rSr)~!"><field
      name="year">1977</field><field name="month">7</field><field name="day">1</field></block></value><next><block
      type="unary_attribute_selector" id="d*kL=d|$^HeT6j3*~4=!"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="resided_in_canada_after_18_as_of_july" attributetype="boolean"></mutation><field
      name="prefix">as of July 1977</field><field name="postfix">had resided in Canada
      after 18 years of age</field><value name="first_element"><block type="variable"
      id="8!H9~,mV5K(UO|^ue+,."><field name="variable_name">Person</field></block></value></block></next></block></next></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="^43]hJ!)+Cow~{TQr0uc"><value
      name="rule"><block type="doc_selector" id="H![BuT|kU`_Ld{4B]S%?"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="*4L?:7PvOL%TY]$DP$X("><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_requirement_s3_1_b_i" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence requirements
      of section 3(1)(b)(i)</field><value name="first_element"><block type="variable"
      id="89{qB3OHP+7XA*`8NRdt"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,birthdate,date).

      blawx_attribute_nlg(birthdate,ov,"","was born on","").

      #pred birthdate(X,Y) :: ''@(X) was born on @(Y)''.

      #pred according_to(R,birthdate(X,Y)) :: ''according to @(R), @(X) was born on
      @(Y)''.

      #pred legally_holds(_,birthdate(X,Y)) :: ''it legally holds that @(X) was born
      on @(Y)''.

      opposes(birthdate(X,Y),-birthdate(X,Y)).

      opposes(-birthdate(X,Y),birthdate(X,Y)).

      blawx_attribute(person,resided_in_canada_july,boolean).

      blawx_attribute_nlg(resided_in_canada_july,not_applicable,"as of July 1977",not_applicable,"resided
      in Canada").

      #pred resided_in_canada_july(X) :: ''as of July 1977 @(X) resided in Canada''.

      #pred according_to(R,resided_in_canada_july(X)) :: ''according to @(R), as of
      July 1977 @(X) resided in Canada''.

      #pred legally_holds(_,resided_in_canada_july(X)) :: ''it legally holds that
      as of July 1977 @(X) resided in Canada''.

      opposes(resided_in_canada_july(X),-resided_in_canada_july(X)).

      opposes(-resided_in_canada_july(X),resided_in_canada_july(X)).

      blawx_attribute(person,possessed_valid_immigration_visa_july,boolean).

      blawx_attribute_nlg(possessed_valid_immigration_visa_july,not_applicable,"as
      of July 1977",not_applicable,"possessed a valid immigration visa").

      #pred possessed_valid_immigration_visa_july(X) :: ''as of July 1977 @(X) possessed
      a valid immigration visa''.

      #pred according_to(R,possessed_valid_immigration_visa_july(X)) :: ''according
      to @(R), as of July 1977 @(X) possessed a valid immigration visa''.

      #pred legally_holds(_,possessed_valid_immigration_visa_july(X)) :: ''it legally
      holds that as of July 1977 @(X) possessed a valid immigration visa''.

      opposes(possessed_valid_immigration_visa_july(X),-possessed_valid_immigration_visa_july(X)).

      opposes(-possessed_valid_immigration_visa_july(X),possessed_valid_immigration_visa_july(X)).

      blawx_attribute(person,resided_in_canada_after_18_as_of_july,boolean).

      blawx_attribute_nlg(resided_in_canada_after_18_as_of_july,not_applicable,"as
      of July 1977",not_applicable,"had resided in Canada after 18 years of age").

      #pred resided_in_canada_after_18_as_of_july(X) :: ''as of July 1977 @(X) had
      resided in Canada after 18 years of age''.

      #pred according_to(R,resided_in_canada_after_18_as_of_july(X)) :: ''according
      to @(R), as of July 1977 @(X) had resided in Canada after 18 years of age''.

      #pred legally_holds(_,resided_in_canada_after_18_as_of_july(X)) :: ''it legally
      holds that as of July 1977 @(X) had resided in Canada after 18 years of age''.

      opposes(resided_in_canada_after_18_as_of_july(X),-resided_in_canada_after_18_as_of_july(X)).

      opposes(-resided_in_canada_after_18_as_of_july(X),resided_in_canada_after_18_as_of_july(X)).


      according_to(sec_3__subsec_1__para_b__subpara_i_section,  meets_residence_requirement_s3_1_b_i(Person))
      :-

      not pensioner_july(Person),

      birthdate(Person,Birthdate),

      datetime_add(Birthdate,duration(1,25,0,0,0,0,0),DateAttaining25Years),

      not_after(DateAttaining25Years,date(1977,7,1)),

      resided_in_canada_july(Person).


      according_to(sec_3__subsec_1__para_b__subpara_i_section,  meets_residence_requirement_s3_1_b_i(Person))
      :-

      not pensioner_july(Person),

      not resided_in_canada_july(Person),

      birthdate(Person,Birthdate),

      datetime_add(Birthdate,duration(1,25,0,0,0,0,0),DateAttaining25Years),

      not_after(DateAttaining25Years,date(1977,7,1)),

      possessed_valid_immigration_visa_july(Person).


      according_to(sec_3__subsec_1__para_b__subpara_i_section,  meets_residence_requirement_s3_1_b_i(Person))
      :-

      not pensioner_july(Person),

      not resided_in_canada_july(Person),

      birthdate(Person,Birthdate),

      datetime_add(Birthdate,duration(1,25,0,0,0,0,0),DateAttaining25Years),

      not_after(DateAttaining25Years,date(1977,7,1)),

      resided_in_canada_after_18_as_of_july(Person).'
- model: blawx.workspace
  pk: 47
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_b__subpara_ii_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_rule"
      id=".$bHPv#i/J#e83On1{TD" x="58" y="337"><comment pinned="false" h="184" w="261">A
      more typical method of calculating age would be to take the years from the duration
      obtained by subtracting the birthdate from today, but currently Blawx's date
      subtraction returns only days, not years, which raises leap-year risks, so this
      is more accurate because it accounts for leap-years.</comment><statement name="conditions"><block
      type="today" id="}Ue,e^bc#SRO0PXUyBo0"><value name="NAME"><block type="variable"
      id="uoO^L3F,[gvh`H{d]vzT"><field name="variable_name">Today</field></block></value><next><block
      type="attribute_selector" id=".O_-xYVV{-$4HOrj2NrB"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="birthdate" attributetype="Calendar Date" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">was born on</field><field name="postfix"></field><value
      name="first_element"><block type="variable" id=":ZFZ.$p,ewF!a9|f*lz%"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="q*-9nA_^6.KTK(,`H#7o"><field name="variable_name">Birthdate</field></block></value><next><block
      type="date_add" id="9^EZ]HEPbTxOUKI3cGri"><value name="duration"><block type="duration_value"
      id="281zC2M:4=^twC_%jPe_"><field name="sign">1</field><field name="years">65</field><field
      name="months">0</field><field name="days">0</field><field name="hours">0</field><field
      name="minutes">0</field><field name="seconds">0</field></block></value><value
      name="first_date"><block type="variable" id="^a0sX$?mB--ze^5AkwhH"><field name="variable_name">Birthdate</field></block></value><value
      name="second_date"><block type="variable" id="fo%n[C-zO3[OXA2,,+N}"><field name="variable_name">DateAttaining65</field></block></value><next><block
      type="date_comparison" id=";raKx0Ntbdqota;IqGq,"><field name="comparison">lte</field><value
      name="first_date"><block type="variable" id="NM[0;aEVe7PXd0)Q6HRg"><field name="variable_name">DateAttaining65</field></block></value><value
      name="second_date"><block type="variable" id="HJ+S1hb1NmZ1[#|!I]R5"><field name="variable_name">Today</field></block></value></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="KiGgT+s,g~I2RS*sM,(E"><value
      name="rule"><block type="doc_selector" id="Ndz;,KK8W}Gsy~uERKqY"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b__subpara_ii_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.ii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="/%i3c0/Q(IsHWfGb`:)/"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_age_requirement_s3_1_b_ii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the age requirement of section
      3(1)(b)(ii)</field><value name="first_element"><block type="variable" id=":J/GUQ?%q;O#zv{-j!Sk"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: '% A more typical method of calculating age would be to take

      % the years from the duration obtained by subtracting the

      % birthdate from today, but currently Blawx''s date subtraction

      % returns only days, not years, which raises leap-year risks,

      % so this is more accurate because it accounts for leap-years.

      according_to(sec_3__subsec_1__para_b__subpara_ii_section,  meets_age_requirement_s3_1_b_ii(Person))
      :-

      blawx_today(Today),

      birthdate(Person,Birthdate),

      datetime_add(Birthdate,duration(1,65,0,0,0,0,0),DateAttaining65),

      not_after(DateAttaining65,Today).'
- model: blawx.workspace
  pk: 48
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_b_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="L5r^S.Hc=ufydzQsKujx" x="48" y="16"><statement name="statements"><block
      type="new_attribute_declaration" id="NP6%B*Th|5JRMzTkM#DG"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">meets_residence_requirement_s3_1_b_i</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">meets the residence requirements of section 3(1)(b)(i)</field><next><block
      type="new_attribute_declaration" id="|~QR-SOChBLH.l7wd}FX"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">meets_age_requirement_s3_1_b_ii</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">meets the age requirement of section 3(1)(b)(ii)</field><next><block
      type="new_attribute_declaration" id="sCxc@kh,OT(aB59u+]Pe"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">meets_residence_duration_requirement_s3_1_b_iii</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">meets the residence
      duration requirement of section 3(1)(b)(iii)</field></block></next></block></next></block></statement></block><block
      type="unattributed_rule" id="GjVgolY?tA2(p~qxE;l=" x="37" y="307"><statement
      name="conditions"><block type="new_object_category" id="K8p[(-+0I~TJ8~deujO1"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="h}h2xDF@[Q=82y^$]BB]"><field name="variable_name">Person</field></block></value><next><block
      type="according_to" id="8GUmBj]`brNp]^q#@Rlm"><value name="rule"><block type="doc_selector"
      id="zRme(6+(Wz,`N+1P0g:6"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_b__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="565I]J1A^nI._CG^ljXX"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_requirement_s3_1_b_i" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence requirements
      of section 3(1)(b)(i)</field><value name="first_element"><block type="variable"
      id="BcvXO]Fi5{O:{aI~i2*T"><field name="variable_name">Person</field></block></value></block></statement><next><block
      type="according_to" id="j4x*6-r^E[BtIhAM|5Ar"><value name="rule"><block type="doc_selector"
      id="nWS65od9t./OWYEySLZn"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_b__subpara_ii_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.ii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="Zw]?uCBqCsG=w:PXOI4["><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_age_requirement_s3_1_b_ii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the age requirement of section
      3(1)(b)(ii)</field><value name="first_element"><block type="variable" id="tWA}^U!w-[q29Js0B{{D"><field
      name="variable_name">Person</field></block></value></block></statement><next><block
      type="according_to" id="T:[u;yP!~-U3(WOhwx*:"><value name="rule"><block type="doc_selector"
      id="Wh:IZCc6_-@vVY3l539h"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_b__subpara_iii_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.iii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="rj^pz)P3v9S0E]jLq=6/"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_duration_requirement_s3_1_b_iii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence duration requirement
      of section 3(1)(b)(iii)</field><value name="first_element"><block type="variable"
      id="Z?fV]QY([qPr6ba:APIr"><field name="variable_name">Person</field></block></value></block></statement></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="%n2/K24PQ*[lD:;579rW"><value
      name="rule"><block type="doc_selector" id="!wOFp6`wLAe.t6.aa,ZO"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b_section"></mutation><field name="doc_part_name">OASA
      3.1.b</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="l+4:ckfieNjqGSj}.d1_"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="qualifies_s3_1_b"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">qualifies
      under s3(1)(b)</field><value name="first_element"><block type="variable" id="lvVwG#m!z([tgV`by$H|"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,meets_residence_requirement_s3_1_b_i,boolean).

      blawx_attribute_nlg(meets_residence_requirement_s3_1_b_i,not_applicable,"",not_applicable,"meets
      the residence requirements of section 3(1)(b)(i)").

      #pred meets_residence_requirement_s3_1_b_i(X) :: ''@(X) meets the residence
      requirements of section 3(1)(b)(i)''.

      #pred according_to(R,meets_residence_requirement_s3_1_b_i(X)) :: ''according
      to @(R), @(X) meets the residence requirements of section 3(1)(b)(i)''.

      #pred legally_holds(_,meets_residence_requirement_s3_1_b_i(X)) :: ''it legally
      holds that @(X) meets the residence requirements of section 3(1)(b)(i)''.

      opposes(meets_residence_requirement_s3_1_b_i(X),-meets_residence_requirement_s3_1_b_i(X)).

      opposes(-meets_residence_requirement_s3_1_b_i(X),meets_residence_requirement_s3_1_b_i(X)).

      blawx_attribute(person,meets_age_requirement_s3_1_b_ii,boolean).

      blawx_attribute_nlg(meets_age_requirement_s3_1_b_ii,not_applicable,"",not_applicable,"meets
      the age requirement of section 3(1)(b)(ii)").

      #pred meets_age_requirement_s3_1_b_ii(X) :: ''@(X) meets the age requirement
      of section 3(1)(b)(ii)''.

      #pred according_to(R,meets_age_requirement_s3_1_b_ii(X)) :: ''according to @(R),
      @(X) meets the age requirement of section 3(1)(b)(ii)''.

      #pred legally_holds(_,meets_age_requirement_s3_1_b_ii(X)) :: ''it legally holds
      that @(X) meets the age requirement of section 3(1)(b)(ii)''.

      opposes(meets_age_requirement_s3_1_b_ii(X),-meets_age_requirement_s3_1_b_ii(X)).

      opposes(-meets_age_requirement_s3_1_b_ii(X),meets_age_requirement_s3_1_b_ii(X)).

      blawx_attribute(person,meets_residence_duration_requirement_s3_1_b_iii,boolean).

      blawx_attribute_nlg(meets_residence_duration_requirement_s3_1_b_iii,not_applicable,"",not_applicable,"meets
      the residence duration requirement of section 3(1)(b)(iii)").

      #pred meets_residence_duration_requirement_s3_1_b_iii(X) :: ''@(X) meets the
      residence duration requirement of section 3(1)(b)(iii)''.

      #pred according_to(R,meets_residence_duration_requirement_s3_1_b_iii(X)) ::
      ''according to @(R), @(X) meets the residence duration requirement of section
      3(1)(b)(iii)''.

      #pred legally_holds(_,meets_residence_duration_requirement_s3_1_b_iii(X)) ::
      ''it legally holds that @(X) meets the residence duration requirement of section
      3(1)(b)(iii)''.

      opposes(meets_residence_duration_requirement_s3_1_b_iii(X),-meets_residence_duration_requirement_s3_1_b_iii(X)).

      opposes(-meets_residence_duration_requirement_s3_1_b_iii(X),meets_residence_duration_requirement_s3_1_b_iii(X)).


      according_to(sec_3__subsec_1__para_b_section,  qualifies_s3_1_b(Person)) :-

      person(Person),

      according_to(sec_3__subsec_1__para_b__subpara_i_section,  meets_residence_requirement_s3_1_b_i(Person)),

      according_to(sec_3__subsec_1__para_b__subpara_ii_section,  meets_age_requirement_s3_1_b_ii(Person)),

      according_to(sec_3__subsec_1__para_b__subpara_iii_section,  meets_residence_duration_requirement_s3_1_b_iii(Person)).'
- model: blawx.workspace
  pk: 49
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_c_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="109#+%mTdaC7F)O;Gf8W" x="80" y="32"><statement name="statements"><block
      type="new_attribute_declaration" id="b5:K.SHIxTU]u1aK3bqz"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">meets_s3_1_c_i</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">satisfies the non-pensioner requirement of s3(1)(c)(i)</field><next><block
      type="new_attribute_declaration" id="|z?i0L`z9X+2XpX+1]qW"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">meets_s3_1_c_ii</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">satisfies the age requirement of s3(1)(c)(ii)</field><next><block
      type="new_attribute_declaration" id=";)DrU5=ZzLOpzy=)L0[)"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">meets_s3_1_c_iii</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">satisfies the residency requirement of s3(1)(c)(iii)</field></block></next></block></next></block></statement></block><block
      type="unattributed_rule" id="s5f*Eg8AM23}qT|PFaQP" x="80" y="397"><statement
      name="conditions"><block type="object_category" id="2Ki6|+2Z|4(y`@:}7Ox|"><value
      name="object"><block type="variable" id="kMcX2Yf9*C`.hn[tY$k@"><field name="variable_name">Person</field></block></value><value
      name="category"><block type="category_selector" id="`#0)D~YMMQWOqfyW)t*j"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person"></mutation><field
      name="category_name">person</field></block></value><next><block type="according_to"
      id="O{,Z`eKoMpCtI=G;dp=y"><value name="rule"><block type="doc_selector" id="s[F[pQ]]g2f5P~|4S=sl"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_c__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="]5GrM_ZWlaNcyl)Nog?F"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_i" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the non-pensioner requirement of s3(1)(c)(i)</field><value
      name="first_element"><block type="variable" id="Fxj{EJJ4L{9x88tFvk#c"><field
      name="variable_name">Person</field></block></value></block></statement><next><block
      type="according_to" id="5d45m^@c.vc_}HPYm~g?"><value name="rule"><block type="doc_selector"
      id="n@=FV1`J(xL}g$BsXoxJ"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_c__subpara_ii_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.ii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="@3(H3wv,tG|RePES|g?X"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_ii" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the age requirement of s3(1)(c)(ii)</field><value name="first_element"><block
      type="variable" id="Oe[d9%-Zz4_.H^KL2#v`"><field name="variable_name">Person</field></block></value></block></statement><next><block
      type="according_to" id="lHg}!N2VJf8WRkTHat=j"><value name="rule"><block type="doc_selector"
      id="%7Sm0.x=Ee-3k[T}_S.t"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_c__subpara_iii_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.iii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="UPVA0zk8d=p8h+d0-d:6"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_iii" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the residency requirement of s3(1)(c)(iii)</field><value
      name="first_element"><block type="variable" id="MQihSF@vvaM|-?$[/A|-"><field
      name="variable_name">Person</field></block></value></block></statement></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="/|lYo^P`E9k8-E}g;`$#"><value
      name="rule"><block type="doc_selector" id=")rSYDp7}j+jeH7Ycy;K*"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_c_section"></mutation><field name="doc_part_name">OASA
      3.1.c</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="RJw/Q_2U@=!ZE49C~D2D"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="qualifies_s3_1_c"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">qualifies
      under s3(1)(c)</field><value name="first_element"><block type="variable" id="5[hm/tvQ{w=^bnUU2Pw!"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,meets_s3_1_c_i,boolean).

      blawx_attribute_nlg(meets_s3_1_c_i,not_applicable,"",not_applicable,"satisfies
      the non-pensioner requirement of s3(1)(c)(i)").

      #pred meets_s3_1_c_i(X) :: ''@(X) satisfies the non-pensioner requirement of
      s3(1)(c)(i)''.

      #pred according_to(R,meets_s3_1_c_i(X)) :: ''according to @(R), @(X) satisfies
      the non-pensioner requirement of s3(1)(c)(i)''.

      #pred legally_holds(_,meets_s3_1_c_i(X)) :: ''it legally holds that @(X) satisfies
      the non-pensioner requirement of s3(1)(c)(i)''.

      opposes(meets_s3_1_c_i(X),-meets_s3_1_c_i(X)).

      opposes(-meets_s3_1_c_i(X),meets_s3_1_c_i(X)).

      blawx_attribute(person,meets_s3_1_c_ii,boolean).

      blawx_attribute_nlg(meets_s3_1_c_ii,not_applicable,"",not_applicable,"satisfies
      the age requirement of s3(1)(c)(ii)").

      #pred meets_s3_1_c_ii(X) :: ''@(X) satisfies the age requirement of s3(1)(c)(ii)''.

      #pred according_to(R,meets_s3_1_c_ii(X)) :: ''according to @(R), @(X) satisfies
      the age requirement of s3(1)(c)(ii)''.

      #pred legally_holds(_,meets_s3_1_c_ii(X)) :: ''it legally holds that @(X) satisfies
      the age requirement of s3(1)(c)(ii)''.

      opposes(meets_s3_1_c_ii(X),-meets_s3_1_c_ii(X)).

      opposes(-meets_s3_1_c_ii(X),meets_s3_1_c_ii(X)).

      blawx_attribute(person,meets_s3_1_c_iii,boolean).

      blawx_attribute_nlg(meets_s3_1_c_iii,not_applicable,"",not_applicable,"satisfies
      the residency requirement of s3(1)(c)(iii)").

      #pred meets_s3_1_c_iii(X) :: ''@(X) satisfies the residency requirement of s3(1)(c)(iii)''.

      #pred according_to(R,meets_s3_1_c_iii(X)) :: ''according to @(R), @(X) satisfies
      the residency requirement of s3(1)(c)(iii)''.

      #pred legally_holds(_,meets_s3_1_c_iii(X)) :: ''it legally holds that @(X) satisfies
      the residency requirement of s3(1)(c)(iii)''.

      opposes(meets_s3_1_c_iii(X),-meets_s3_1_c_iii(X)).

      opposes(-meets_s3_1_c_iii(X),meets_s3_1_c_iii(X)).


      according_to(sec_3__subsec_1__para_c_section,  qualifies_s3_1_c(Person)) :-

      person(Person),

      according_to(sec_3__subsec_1__para_c__subpara_i_section,  meets_s3_1_c_i(Person)),

      according_to(sec_3__subsec_1__para_c__subpara_ii_section,  meets_s3_1_c_ii(Person)),

      according_to(sec_3__subsec_1__para_c__subpara_iii_section,  meets_s3_1_c_iii(Person)).'
- model: blawx.workspace
  pk: 50
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="+wiRc,{vWYCb,a0_j9)u" x="23" y="34"><statement name="statements"><block
      type="new_attribute_declaration" id="r-qQ_I:c~hi3PwwSLQEA"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">may_be_paid_full_monthly_pension</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix">a full monthly pension may be paid
      to</field><field name="first_element">object</field><field name="infix">'s attribute
      name is</field><field name="second_element">value</field><field name="postfix"></field><next><block
      type="new_attribute_declaration" id="uT=HPf!-#WK6Q*fpLvRG"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">qualifies_s3_1_a</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">qualifies under s3(1)(a)</field><next><block type="new_attribute_declaration"
      id="oAQc;rFR]d5kZ`Bf._gx"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">qualifies_s3_1_b</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">qualifies under s3(1)(b)</field><next><block type="new_attribute_declaration"
      id="#(je3%DB}O/TQnZ7}Lbm"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">qualifies_s3_1_c</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">qualifies under s3(1)(c)</field></block></next></block></next></block></next></block></statement></block><block
      type="unattributed_rule" id="-Q)/NYN_8~y6ru,XrtC/" x="18" y="489"><statement
      name="conditions"><block type="according_to" id="x}E(sVYc0]u;1hgj~8+M"><value
      name="rule"><block type="doc_selector" id="_/Y#2moi98}Xyq[xh:-,"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_a_section"></mutation><field name="doc_part_name">OASA
      3.1.a</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="|-`YvT3.?ltt[IKG0Tdw"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="qualifies_s3_1_a"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">qualifies
      under s3(1)(a)</field><value name="first_element"><block type="variable" id="Xt4k!8I+lK~#%NMs~f$V"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement><statement
      name="conclusion"><block type="according_to" id="stFFqeri7$56nZZlgq@S"><value
      name="rule"><block type="doc_selector" id="59i?K]:i;*Xzn=tujxi$"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1_section"></mutation><field name="doc_part_name">OASA
      3.1</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="CFgl:r{cO@d1_QY;)]v+"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="variable" id="/De*i]*Myd%y*,xo4:8`"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block><block
      type="unattributed_rule" id="9E%UV]u(Z67=I_V:hyV8" x="20" y="716"><statement
      name="conditions"><block type="according_to" id="=AU}ciIr:Bl}_N1kNn:l"><value
      name="rule"><block type="doc_selector" id="YuR))r8u?):2ZLm{Uqi{"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b_section"></mutation><field name="doc_part_name">OASA
      3.1.b</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="VL;@/nzvMDk+0;x7Zw*X"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="qualifies_s3_1_b"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">qualifies
      under s3(1)(b)</field><value name="first_element"><block type="variable" id="%hrQ)(^h2h%R2x_8#^GT"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement><statement
      name="conclusion"><block type="according_to" id="amrE#7(_hc-blx4AD;-["><value
      name="rule"><block type="doc_selector" id="o=x$cknmYs-.z1^FVuJP"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1_section"></mutation><field name="doc_part_name">OASA
      3.1</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="CLa,pad5qwwn*QlPS/y@"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="variable" id="l]SsKD+Lkz8Eq1Dy_Uai"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block><block
      type="unattributed_rule" id="XkdN@xLD2T%XB9y6?C2P" x="23" y="953"><statement
      name="conditions"><block type="according_to" id="M(p@,a^a^9IOT80=+0,["><value
      name="rule"><block type="doc_selector" id="68j,s]d0myEOw{@4C;Q,"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_c_section"></mutation><field name="doc_part_name">OASA
      3.1.c</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="HaN6W)g2FEKR=vl(,rv+"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="qualifies_s3_1_c"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">qualifies
      under s3(1)(c)</field><value name="first_element"><block type="variable" id="P72lzrOai8fg7Oml?[[y"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement><statement
      name="conclusion"><block type="according_to" id="Jcn.P/N6D9i`xoYnBvG."><value
      name="rule"><block type="doc_selector" id="+2voAGg8JZt%aSgznu*6"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1_section"></mutation><field name="doc_part_name">OASA
      3.1</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="}PLeER/)=).@!bvYvo5G"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="variable" id="}vk~_[[OL7#RJ$D~gp#s"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block><block
      type="unattributed_fact" id=",=]tc[UgOa~j`JiaidTF" x="37" y="1195"><comment
      pinned="false" h="259" w="330">Ideally, we would be able to more accurately
      represent "this Act and the regulations" in the "Subject to" clause, but scope
      references for legislation and related legislation are not yet implemented in
      Blawx. That being the case, we will mention specific sections in conflict, here,
      to give effect to the defeasibility declaration in the law.</comment><statement
      name="statements"><block type="overrules" id="z=Q3^U(E+:w8~)eK*!lI"><value name="defeating_rule"><block
      type="doc_selector" id="wqq79b.bdH[;SZ0ciZWM"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_4__subsec_1_section"></mutation><field name="doc_part_name">OASA
      4.1</field></block></value><value name="defeated_rule"><block type="doc_selector"
      id="[YICtgEx4qa_}+2K@a*Q"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1_section"></mutation><field
      name="doc_part_name">OASA 3.1</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,may_be_paid_full_monthly_pension,boolean).

      blawx_attribute_nlg(may_be_paid_full_monthly_pension,not_applicable,"a full
      monthly pension may be paid to",not_applicable,"").

      #pred may_be_paid_full_monthly_pension(X) :: ''a full monthly pension may be
      paid to @(X)''.

      #pred according_to(R,may_be_paid_full_monthly_pension(X)) :: ''according to
      @(R), a full monthly pension may be paid to @(X)''.

      #pred legally_holds(_,may_be_paid_full_monthly_pension(X)) :: ''it legally holds
      that a full monthly pension may be paid to @(X)''.

      opposes(may_be_paid_full_monthly_pension(X),-may_be_paid_full_monthly_pension(X)).

      opposes(-may_be_paid_full_monthly_pension(X),may_be_paid_full_monthly_pension(X)).

      blawx_attribute(person,qualifies_s3_1_a,boolean).

      blawx_attribute_nlg(qualifies_s3_1_a,not_applicable,"",not_applicable,"qualifies
      under s3(1)(a)").

      #pred qualifies_s3_1_a(X) :: ''@(X) qualifies under s3(1)(a)''.

      #pred according_to(R,qualifies_s3_1_a(X)) :: ''according to @(R), @(X) qualifies
      under s3(1)(a)''.

      #pred legally_holds(_,qualifies_s3_1_a(X)) :: ''it legally holds that @(X) qualifies
      under s3(1)(a)''.

      opposes(qualifies_s3_1_a(X),-qualifies_s3_1_a(X)).

      opposes(-qualifies_s3_1_a(X),qualifies_s3_1_a(X)).

      blawx_attribute(person,qualifies_s3_1_b,boolean).

      blawx_attribute_nlg(qualifies_s3_1_b,not_applicable,"",not_applicable,"qualifies
      under s3(1)(b)").

      #pred qualifies_s3_1_b(X) :: ''@(X) qualifies under s3(1)(b)''.

      #pred according_to(R,qualifies_s3_1_b(X)) :: ''according to @(R), @(X) qualifies
      under s3(1)(b)''.

      #pred legally_holds(_,qualifies_s3_1_b(X)) :: ''it legally holds that @(X) qualifies
      under s3(1)(b)''.

      opposes(qualifies_s3_1_b(X),-qualifies_s3_1_b(X)).

      opposes(-qualifies_s3_1_b(X),qualifies_s3_1_b(X)).

      blawx_attribute(person,qualifies_s3_1_c,boolean).

      blawx_attribute_nlg(qualifies_s3_1_c,not_applicable,"",not_applicable,"qualifies
      under s3(1)(c)").

      #pred qualifies_s3_1_c(X) :: ''@(X) qualifies under s3(1)(c)''.

      #pred according_to(R,qualifies_s3_1_c(X)) :: ''according to @(R), @(X) qualifies
      under s3(1)(c)''.

      #pred legally_holds(_,qualifies_s3_1_c(X)) :: ''it legally holds that @(X) qualifies
      under s3(1)(c)''.

      opposes(qualifies_s3_1_c(X),-qualifies_s3_1_c(X)).

      opposes(-qualifies_s3_1_c(X),qualifies_s3_1_c(X)).


      according_to(sec_3__subsec_1_section,  may_be_paid_full_monthly_pension(Person))
      :-

      according_to(sec_3__subsec_1__para_a_section,  qualifies_s3_1_a(Person)).


      according_to(sec_3__subsec_1_section,  may_be_paid_full_monthly_pension(Person))
      :-

      according_to(sec_3__subsec_1__para_b_section,  qualifies_s3_1_b(Person)).


      according_to(sec_3__subsec_1_section,  may_be_paid_full_monthly_pension(Person))
      :-

      according_to(sec_3__subsec_1__para_c_section,  qualifies_s3_1_c(Person)).


      % Ideally, we would be able to more accurately represent

      % "this Act and the regulations" in the "Subject to" clause,

      % but scope references for legislation and related legislation

      % are not yet implemented in Blawx. That being the case,

      % we will mention specific sections in conflict, here, to

      % give effect to the defeasibility declaration in the law.

      overrules(sec_4__subsec_1_section,sec_3__subsec_1_section).'
- model: blawx.workspace
  pk: 51
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_b__subpara_iii_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="Sp@/sc_CHiBc[}/t!syw" x="54" y="39"><statement name="statements"><block
      type="new_attribute_declaration" id="2U]!}EG$Y~b*mRk2xja("><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">resided_in_canada_10_years_prior_to_approval</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">resided in canada for
      10 years prior to approval</field><next><block type="new_attribute_declaration"
      id="#kvNVcW|~jpomwM1-tD~"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">meets_aggregate_residence_requirement_s3_1_b_iii</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">was in Canada more
      than away between 18 and 10 years prior to approval</field><next><block type="new_attribute_declaration"
      id="+0O;75zid!;c=:@ZRI`2"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">has_resided_one_year_prior_to_approval</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">resided in Canada for the year prior to approval</field></block></next></block></next></block></statement></block><block
      type="unattributed_rule" id="C6QBa]1-B-6,L%;c6#i8" x="51" y="399"><statement
      name="conditions"><block type="unary_attribute_selector" id="}7`]M4+~Uxm.Bd2c7;^W"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="resided_in_canada_10_years_prior_to_approval"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">resided
      in canada for 10 years prior to approval</field><value name="first_element"><block
      type="variable" id="mV;b?r-`)(R!jRNMpB$|"><field name="variable_name">Person</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id="{`[J_,5A{k/qclB2PHdB"><value
      name="rule"><block type="doc_selector" id="3/8yz-|h.1DZxy33^6*s"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b__subpara_iii_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.iii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="p,UU.X$t;kgP}jy%SllK"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_duration_requirement_s3_1_b_iii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence duration requirement
      of section 3(1)(b)(iii)</field><value name="first_element"><block type="variable"
      id="]2+@X(9|:6C@lUgRc|oy"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block><block
      type="unattributed_rule" id="a+%l8eGHrMT3n|$nde.D" x="46" y="575"><statement
      name="conditions"><block type="default_negation" id="Ko:@qF#5YnX]+iM1n{LM"><statement
      name="default_negated_statement"><block type="unary_attribute_selector" id="n)K8N}Uz_DV754+^:5iQ"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="resided_in_canada_10_years_prior_to_approval"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">resided
      in canada for 10 years prior to approval</field><value name="first_element"><block
      type="variable" id="8+[H)g`seAGZn@k4:Bzf"><field name="variable_name">Person</field></block></value></block></statement><next><block
      type="unary_attribute_selector" id=":s]WU3(|F8!2TAyme+C("><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_aggregate_residence_requirement_s3_1_b_iii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">was in Canada more than away between
      18 and 10 years prior to approval</field><value name="first_element"><block
      type="variable" id="FwN$J!.Z[XI8R(~26vLd"><field name="variable_name">Person</field></block></value><next><block
      type="unary_attribute_selector" id="FXt3^fk~8Sikc*6T(t5P"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="has_resided_one_year_prior_to_approval" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">resided in Canada for the year prior
      to approval</field><value name="first_element"><block type="variable" id="ve-gR`k}bl|32+/}1~R)"><field
      name="variable_name">Person</field></block></value></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="D.9jN~UF8=;7Koe.BvCX"><value
      name="rule"><block type="doc_selector" id="#vXq),eT;hf9~+Z-}1Hj"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_b__subpara_iii_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.iii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="I27[`*tlIt39NP|ehk#5"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_duration_requirement_s3_1_b_iii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence duration requirement
      of section 3(1)(b)(iii)</field><value name="first_element"><block type="variable"
      id="}:,Mw3(AX|fY@1{1vKB7"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,resided_in_canada_10_years_prior_to_approval,boolean).

      blawx_attribute_nlg(resided_in_canada_10_years_prior_to_approval,not_applicable,"",not_applicable,"resided
      in canada for 10 years prior to approval").

      #pred resided_in_canada_10_years_prior_to_approval(X) :: ''@(X) resided in canada
      for 10 years prior to approval''.

      #pred according_to(R,resided_in_canada_10_years_prior_to_approval(X)) :: ''according
      to @(R), @(X) resided in canada for 10 years prior to approval''.

      #pred legally_holds(_,resided_in_canada_10_years_prior_to_approval(X)) :: ''it
      legally holds that @(X) resided in canada for 10 years prior to approval''.

      opposes(resided_in_canada_10_years_prior_to_approval(X),-resided_in_canada_10_years_prior_to_approval(X)).

      opposes(-resided_in_canada_10_years_prior_to_approval(X),resided_in_canada_10_years_prior_to_approval(X)).

      blawx_attribute(person,meets_aggregate_residence_requirement_s3_1_b_iii,boolean).

      blawx_attribute_nlg(meets_aggregate_residence_requirement_s3_1_b_iii,not_applicable,"",not_applicable,"was
      in Canada more than away between 18 and 10 years prior to approval").

      #pred meets_aggregate_residence_requirement_s3_1_b_iii(X) :: ''@(X) was in Canada
      more than away between 18 and 10 years prior to approval''.

      #pred according_to(R,meets_aggregate_residence_requirement_s3_1_b_iii(X)) ::
      ''according to @(R), @(X) was in Canada more than away between 18 and 10 years
      prior to approval''.

      #pred legally_holds(_,meets_aggregate_residence_requirement_s3_1_b_iii(X)) ::
      ''it legally holds that @(X) was in Canada more than away between 18 and 10
      years prior to approval''.

      opposes(meets_aggregate_residence_requirement_s3_1_b_iii(X),-meets_aggregate_residence_requirement_s3_1_b_iii(X)).

      opposes(-meets_aggregate_residence_requirement_s3_1_b_iii(X),meets_aggregate_residence_requirement_s3_1_b_iii(X)).

      blawx_attribute(person,has_resided_one_year_prior_to_approval,boolean).

      blawx_attribute_nlg(has_resided_one_year_prior_to_approval,not_applicable,"",not_applicable,"resided
      in Canada for the year prior to approval").

      #pred has_resided_one_year_prior_to_approval(X) :: ''@(X) resided in Canada
      for the year prior to approval''.

      #pred according_to(R,has_resided_one_year_prior_to_approval(X)) :: ''according
      to @(R), @(X) resided in Canada for the year prior to approval''.

      #pred legally_holds(_,has_resided_one_year_prior_to_approval(X)) :: ''it legally
      holds that @(X) resided in Canada for the year prior to approval''.

      opposes(has_resided_one_year_prior_to_approval(X),-has_resided_one_year_prior_to_approval(X)).

      opposes(-has_resided_one_year_prior_to_approval(X),has_resided_one_year_prior_to_approval(X)).


      according_to(sec_3__subsec_1__para_b__subpara_iii_section,  meets_residence_duration_requirement_s3_1_b_iii(Person))
      :-

      resided_in_canada_10_years_prior_to_approval(Person).


      according_to(sec_3__subsec_1__para_b__subpara_iii_section,  meets_residence_duration_requirement_s3_1_b_iii(Person))
      :-

      not resided_in_canada_10_years_prior_to_approval(Person),

      meets_aggregate_residence_requirement_s3_1_b_iii(Person),

      has_resided_one_year_prior_to_approval(Person).'
- model: blawx.workspace
  pk: 52
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_c__subpara_ii_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_rule"
      id="bl}F}bWT5[aM.:%S89Vv" x="41" y="84"><statement name="conditions"><block
      type="today" id="=_q.Las$,.2$I:)KetnE"><value name="NAME"><block type="variable"
      id="RKl.57VoWO$4WX4go1)}"><field name="variable_name">Today</field></block></value><next><block
      type="attribute_selector" id="Fy7|VU*xkV#{sw6VYF)2"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="birthdate" attributetype="Calendar Date" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">was born on</field><field name="postfix"></field><value
      name="first_element"><block type="variable" id="$@81-trb#cDO?PwXj(WP"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="oWl.WLT8xmMiREU;1p3x"><field name="variable_name">Birthdate</field></block></value><next><block
      type="date_add" id="9^EZ]HEPbTxOUKI3cGri"><value name="duration"><block type="duration_value"
      id="281zC2M:4=^twC_%jPe_"><field name="sign">1</field><field name="years">65</field><field
      name="months">0</field><field name="days">0</field><field name="hours">0</field><field
      name="minutes">0</field><field name="seconds">0</field></block></value><value
      name="first_date"><block type="variable" id="^a0sX$?mB--ze^5AkwhH"><field name="variable_name">Birthdate</field></block></value><value
      name="second_date"><block type="variable" id="fo%n[C-zO3[OXA2,,+N}"><field name="variable_name">DateAttaining65</field></block></value><next><block
      type="date_comparison" id=";raKx0Ntbdqota;IqGq,"><field name="comparison">lte</field><value
      name="first_date"><block type="variable" id="NM[0;aEVe7PXd0)Q6HRg"><field name="variable_name">DateAttaining65</field></block></value><value
      name="second_date"><block type="variable" id="HJ+S1hb1NmZ1[#|!I]R5"><field name="variable_name">Today</field></block></value></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="$tV.*N=]xmx#lv,,!S|9"><value
      name="rule"><block type="doc_selector" id="M0%~57n8^0h];gLDj3HS"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_c__subpara_ii_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.ii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="(BrWx(!P5uIw5k)^[QnL"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_ii" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the age requirement of s3(1)(c)(ii)</field><value name="first_element"><block
      type="variable" id="Qo-L!`bFF@c:RoiRZWcO"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'according_to(sec_3__subsec_1__para_c__subpara_ii_section,  meets_s3_1_c_ii(Person))
      :-

      blawx_today(Today),

      birthdate(Person,Birthdate),

      datetime_add(Birthdate,duration(1,65,0,0,0,0,0),DateAttaining65),

      not_after(DateAttaining65,Today).'
- model: blawx.workspace
  pk: 53
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_c__subpara_i_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_rule"
      id="8hS(B5N$7w{Mk^k/;ICu" x="50" y="193"><statement name="conditions"><block
      type="default_negation" id="icn6{[cS]8=(TAHH[5+-"><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id="OD-Qu~Ew]y(n[/](N}.F"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="pensioner_july" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">was a pensioner on July 1 1977</field><value name="first_element"><block
      type="variable" id="?s8QD=H6nYbD3O*TIl^E"><field name="variable_name">Person</field></block></value></block></statement></block></statement><statement
      name="conclusion"><block type="according_to" id="5]exAA/ea}up`rf39#P/"><value
      name="rule"><block type="doc_selector" id="D0lL=wANq5_0/AX.z/c8"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_c__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="epyt@O[m4@T6b4e%w]Jv"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_i" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the non-pensioner requirement of s3(1)(c)(i)</field><value
      name="first_element"><block type="variable" id="Xv%0pCaV9hz}e%5cJnl%"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'according_to(sec_3__subsec_1__para_c__subpara_i_section,  meets_s3_1_c_i(Person))
      :-

      not pensioner_july(Person).'
- model: blawx.workspace
  pk: 54
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_c__subpara_iii_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="0qpz9A@(U,C=Anc!8#mt" x="40" y="59"><statement name="statements"><block
      type="new_attribute_declaration" id=":/EaX[j]0m4s7e;i-#3Q"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">resided_40_years_after_18_yoa</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">resided in Canada at least 40 years since the age of 18</field></block></statement></block><block
      type="unattributed_rule" id="[;?L{LJ@4r3f-g^5lYn." x="39" y="194"><statement
      name="conditions"><block type="unary_attribute_selector" id="68.=a)hZxLllJZ{=EbFN"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="resided_40_years_after_18_yoa"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">resided
      in Canada at least 40 years since the age of 18</field><value name="first_element"><block
      type="variable" id="N+hE@-D;J3y(gd;Ge_`4"><field name="variable_name">Person</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id=");bE/;[B}:QZc4$AnL`~"><value
      name="rule"><block type="doc_selector" id="J(#_.t[/poTG}e-hGnM!"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_c__subpara_iii_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.iii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="=!lvJkU(7{4S#@**ts7;"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_iii" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the residency requirement of s3(1)(c)(iii)</field><value
      name="first_element"><block type="variable" id="yl(3q#Z%_s/n;Km2iF2Z"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,resided_40_years_after_18_yoa,boolean).

      blawx_attribute_nlg(resided_40_years_after_18_yoa,not_applicable,"",not_applicable,"resided
      in Canada at least 40 years since the age of 18").

      #pred resided_40_years_after_18_yoa(X) :: ''@(X) resided in Canada at least
      40 years since the age of 18''.

      #pred according_to(R,resided_40_years_after_18_yoa(X)) :: ''according to @(R),
      @(X) resided in Canada at least 40 years since the age of 18''.

      #pred legally_holds(_,resided_40_years_after_18_yoa(X)) :: ''it legally holds
      that @(X) resided in Canada at least 40 years since the age of 18''.

      opposes(resided_40_years_after_18_yoa(X),-resided_40_years_after_18_yoa(X)).

      opposes(-resided_40_years_after_18_yoa(X),resided_40_years_after_18_yoa(X)).


      according_to(sec_3__subsec_1__para_c__subpara_iii_section,  meets_s3_1_c_iii(Person))
      :-

      resided_40_years_after_18_yoa(Person).'
- model: blawx.workspace
  pk: 55
  fields:
    ruledoc: 4
    workspace_name: sec_3_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 56
  fields:
    ruledoc: 4
    workspace_name: sec_4__subsec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="fZ?RE;oHlZN6#(t[0dYe" x="-11" y="-131"><statement name="statements"><block
      type="new_attribute_declaration" id="uhOJm#TOu@xOdN%v~g)9"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">satisfies_4_1_a</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">satisfies section 4(1)(a)</field><next><block type="new_attribute_declaration"
      id="!(OVRt[Ym27^?1.VK74H"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">satisfies_4_1_b</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">satisfies section 4(1)(b)</field></block></next></block></statement></block><block
      type="unattributed_rule" id="|^xV11SGsp|/^3k}FsJ." x="3" y="76"><comment pinned="false"
      h="270" w="616">Arguably, this should reach a conclusion about "eligibility",
      and "ineligibility" and "payability" would contradict one another, and the contradiction
      be resolved using defeasibility. However, the defeasibility system currently
      suffers from a flaw in how s(CASP) resolves universal quantification, and does
      not work if there are multiple overriding relationships for the same predicate.
      </comment><statement name="conditions"><block type="new_object_category" id="f@Y7eTSb[zn^6NuT%;fo"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="FiZ]YOVd4ULrMXi)O3*`"><field name="variable_name">Person</field></block></value><next><block
      type="default_negation" id="IJe?xWT91d:}OdiP=j1["><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id="TN5hyA4q]rRxdr,9e*30"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="pensioner_july" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">was a pensioner on July 1 1977</field><value name="first_element"><block
      type="variable" id="jz5aO`jy=K$qMmP49%OZ"><field name="variable_name">Person</field></block></value></block></statement><next><block
      type="default_negation" id="Dqp{gkQtT$GLy73Q/gr]"><statement name="default_negated_statement"><block
      type="according_to" id="]*yfq!yEmy33)O}A:Qn="><value name="rule"><block type="doc_selector"
      id="p6WcI`z3Mdkq5`aUZ4A7"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1__para_a_section"></mutation><field
      name="doc_part_name">OASA 4.1.a</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="1lVU:{3LP=4;?-l/RpI+"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="satisfies_4_1_a" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies section 4(1)(a)</field><value name="first_element"><block
      type="variable" id="v^2~/o#YZbBCfmxzPmCJ"><field name="variable_name">Person</field></block></value></block></statement></block></statement><next><block
      type="default_negation" id="h(mU/04~8MZHK=_zPQ75"><statement name="default_negated_statement"><block
      type="according_to" id="Fva[^Lb4VF:F5#RUI1xL"><value name="rule"><block type="doc_selector"
      id="|fsq7=9(|G_~7MLQwZUV"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1__para_b_section"></mutation><field
      name="doc_part_name">OASA 4.1.b</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="heg^2F~c?{|FcJGkX1w#"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="satisfies_4_1_b" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies section 4(1)(b)</field><value name="first_element"><block
      type="variable" id="2DEAAH;mD+0I:4bfANfw"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></next></block></next></block></next></block></statement><statement
      name="conclusion"><block type="according_to" id="9B_`=^gGJJvp8T=5:[u5"><value
      name="rule"><block type="doc_selector" id="~[Y|;eQPN}If|Zq@Q?Lp"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_4__subsec_1_section"></mutation><field name="doc_part_name">OASA
      4.1</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="Pf1#)ZRQ3jl1z/D1+_;Y"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="variable" id="8OL}DN)#Nsr*2)Z/81;7"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,satisfies_4_1_a,boolean).

      blawx_attribute_nlg(satisfies_4_1_a,not_applicable,"",not_applicable,"satisfies
      section 4(1)(a)").

      #pred satisfies_4_1_a(X) :: ''@(X) satisfies section 4(1)(a)''.

      #pred according_to(R,satisfies_4_1_a(X)) :: ''according to @(R), @(X) satisfies
      section 4(1)(a)''.

      #pred legally_holds(_,satisfies_4_1_a(X)) :: ''it legally holds that @(X) satisfies
      section 4(1)(a)''.

      opposes(satisfies_4_1_a(X),-satisfies_4_1_a(X)).

      opposes(-satisfies_4_1_a(X),satisfies_4_1_a(X)).

      blawx_attribute(person,satisfies_4_1_b,boolean).

      blawx_attribute_nlg(satisfies_4_1_b,not_applicable,"",not_applicable,"satisfies
      section 4(1)(b)").

      #pred satisfies_4_1_b(X) :: ''@(X) satisfies section 4(1)(b)''.

      #pred according_to(R,satisfies_4_1_b(X)) :: ''according to @(R), @(X) satisfies
      section 4(1)(b)''.

      #pred legally_holds(_,satisfies_4_1_b(X)) :: ''it legally holds that @(X) satisfies
      section 4(1)(b)''.

      opposes(satisfies_4_1_b(X),-satisfies_4_1_b(X)).

      opposes(-satisfies_4_1_b(X),satisfies_4_1_b(X)).


      % Arguably, this should reach a conclusion about "eligibility", and

      % "ineligibility" and "payability" would contradict one another, and

      % the contradiction be resolved using defeasibility. However, the

      % defeasibility system currently suffers from a flaw in how s(CASP)

      % resolves universal quantification, and does not work if there

      % are multiple overriding relationships for the same predicate.

      according_to(sec_4__subsec_1_section,  may_be_paid_full_monthly_pension(Person))
      :-

      person(Person),

      not pensioner_july(Person),

      not according_to(sec_4__subsec_1__para_a_section,  satisfies_4_1_a(Person)),

      not according_to(sec_4__subsec_1__para_b_section,  satisfies_4_1_b(Person)).'
- model: blawx.workspace
  pk: 57
  fields:
    ruledoc: 4
    workspace_name: sec_4__subsec_1__para_a_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="C@IOG)1*g8eiX~s=aF|Y" x="-23" y="-98"><statement name="statements"><block
      type="new_attribute_declaration" id="lsCoq((s2k22g_w@HH(k"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">citizen_or_resident_before_approval</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">was a citizen or legal resident the day before approval</field></block></statement></block><block
      type="unattributed_rule" id="V`)0~iIATeLDBsj|$}jZ" x="-24" y="53"><statement
      name="conditions"><block type="unary_attribute_selector" id="{N2tXc|0d?Hgu6XArtV@"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="citizen_or_resident_before_approval"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">was
      a citizen or legal resident the day before approval</field><value name="first_element"><block
      type="variable" id="2.^IPjdq@$o}TV)8Ke{3"><field name="variable_name">Person</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id="aySGO}v/f)!wE$9Oxk!O"><value
      name="rule"><block type="doc_selector" id=".mN42Fr`F_qNZkQ^Sx;N"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_4__subsec_1__para_a_section"></mutation><field name="doc_part_name">OASA
      4.1.a</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="Z$ZeblCjE,E96GGWw=+r"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="satisfies_4_1_a"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">satisfies
      section 4(1)(a)</field><value name="first_element"><block type="variable" id="pcjQRTs{Q|/oT8R:UCqq"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,citizen_or_resident_before_approval,boolean).

      blawx_attribute_nlg(citizen_or_resident_before_approval,not_applicable,"",not_applicable,"was
      a citizen or legal resident the day before approval").

      #pred citizen_or_resident_before_approval(X) :: ''@(X) was a citizen or legal
      resident the day before approval''.

      #pred according_to(R,citizen_or_resident_before_approval(X)) :: ''according
      to @(R), @(X) was a citizen or legal resident the day before approval''.

      #pred legally_holds(_,citizen_or_resident_before_approval(X)) :: ''it legally
      holds that @(X) was a citizen or legal resident the day before approval''.

      opposes(citizen_or_resident_before_approval(X),-citizen_or_resident_before_approval(X)).

      opposes(-citizen_or_resident_before_approval(X),citizen_or_resident_before_approval(X)).


      according_to(sec_4__subsec_1__para_a_section,  satisfies_4_1_a(Person)) :-

      citizen_or_resident_before_approval(Person).'
- model: blawx.workspace
  pk: 58
  fields:
    ruledoc: 4
    workspace_name: sec_4__subsec_1__para_b_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="C@IOG)1*g8eiX~s=aF|Y" x="10" y="101"><statement name="statements"><block
      type="new_attribute_declaration" id="B+^whlbshK@B5Km3]Hiw"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">citizen_or_resident_before_departure</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">was a citizen or legal resident the day before departure</field></block></statement></block><block
      type="unattributed_rule" id="V`)0~iIATeLDBsj|$}jZ" x="16" y="291"><statement
      name="conditions"><block type="unary_attribute_selector" id="7zd+zevz^Ff6j0;nH#St"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="citizen_or_resident_before_approval"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">was
      a citizen or legal resident the day before approval</field><value name="first_element"><block
      type="variable" id="Z{(R?yT9uP_Q/j-1rfUF"><field name="variable_name">Person</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id="aySGO}v/f)!wE$9Oxk!O"><value
      name="rule"><block type="doc_selector" id="!3fQ1Rr)(TZ[pbk3uSZJ"><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_4__subsec_1__para_b_section"></mutation><field name="doc_part_name">OASA
      4.1.b</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="L28GRpBB0w$*%v[|9uJ*"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="satisfies_4_1_b"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">satisfies
      section 4(1)(b)</field><value name="first_element"><block type="variable" id="pcjQRTs{Q|/oT8R:UCqq"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,citizen_or_resident_before_departure,boolean).

      blawx_attribute_nlg(citizen_or_resident_before_departure,not_applicable,"",not_applicable,"was
      a citizen or legal resident the day before departure").

      #pred citizen_or_resident_before_departure(X) :: ''@(X) was a citizen or legal
      resident the day before departure''.

      #pred according_to(R,citizen_or_resident_before_departure(X)) :: ''according
      to @(R), @(X) was a citizen or legal resident the day before departure''.

      #pred legally_holds(_,citizen_or_resident_before_departure(X)) :: ''it legally
      holds that @(X) was a citizen or legal resident the day before departure''.

      opposes(citizen_or_resident_before_departure(X),-citizen_or_resident_before_departure(X)).

      opposes(-citizen_or_resident_before_departure(X),citizen_or_resident_before_departure(X)).


      according_to(sec_4__subsec_1__para_b_section,  satisfies_4_1_b(Person)) :-

      citizen_or_resident_before_approval(Person).'
- model: blawx.workspace
  pk: 59
  fields:
    ruledoc: 4
    workspace_name: sec_4_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 60
  fields:
    ruledoc: 4
    workspace_name: sec_3__subsec_1__para_b__subpara_i__span_immigration_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.blawxtest
  pk: 3
  fields:
    ruledoc: 4
    test_name: generic_3_1
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="Q8InM;qw!CZCjX$$bb8n" x="89" y="250"><statement name="query"><block type="holds"
      id="v]/-~3Ut95IfW.@F[L#0"><statement name="statement"><block type="unary_attribute_selector"
      id="B@8)k;0UaO.22Pv{XKbb"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="variable" id="K?7xt@Sw;_T(N37QbJ1r"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- legally_holds(_,  may_be_paid_full_monthly_pension(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_meets_age_requirement_s3_1_b_ii'', ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'',
      ''view_cat_person_att_meets_s3_1_c_i'', ''view_cat_person_att_meets_s3_1_c_ii'',
      ''view_cat_person_att_meets_s3_1_c_iii'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 4
  fields:
    ruledoc: 4
    test_name: generic_3_1_a
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="true_value"
      id="}e4T/,#s(Gl-sp[|o!JG" x="0" y="0"></block><block type="query" id="$N$4N9Yt@P%fIh1qo$z("
      x="85" y="207"><statement name="query"><block type="according_to" id="i^@JUG~u[@rn*qc)gTR*"><value
      name="rule"><block type="doc_selector" id="iQxUvs0}0L]#acN#rt]("><mutation xmlns="http://www.w3.org/1999/xhtml"
      section_reference="sec_3__subsec_1__para_a_section"></mutation><field name="doc_part_name">OASA
      3.1.a</field></block></value><statement name="statement"><block type="unary_attribute_selector"
      id="M.Pd=Td(6cjw+N3(XkY{"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="qualifies_s3_1_a"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">qualifies
      under s3(1)(a)</field><value name="first_element"><block type="variable" id="UAxuSrZBmy*@iJL}*7]e"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'true.


      ?- according_to(sec_3__subsec_1__para_a_section,  qualifies_s3_1_a(Person)).'
    tutorial: ''
    view: '[''view_cat_person_att_birthdate'', ''view_cat_person_att_resided_in_canada_july'',
      ''view_cat_person_att_possessed_valid_immigration_visa_july'', ''view_cat_person_att_resided_in_canada_after_18_as_of_july'',
      ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'', ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'',
      ''view_cat_person_att_has_resided_one_year_prior_to_approval'', ''view_cat_person_att_resided_40_years_after_18_yoa'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 5
  fields:
    ruledoc: 4
    test_name: generic_3_1_b
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="b45P79[j~H@U#Tpe[Q0?" x="161" y="289"><statement name="query"><block type="according_to"
      id="tR-kPHF1CxR}-iU]`lP1"><value name="rule"><block type="doc_selector" id="VP6.L7egl?(txH6(p7!e"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_b_section"></mutation><field
      name="doc_part_name">OASA 3.1.b</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="wwj}w-wWzV#oW@f%`~A#"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="qualifies_s3_1_b" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">qualifies under s3(1)(b)</field><value name="first_element"><block
      type="variable" id="zB6kQeYTcTzg4mFxpb#}"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_b_section,  qualifies_s3_1_b(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_meets_residence_requirement_s3_1_b_i'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'',
      ''view_cat_person_att_resided_40_years_after_18_yoa'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 6
  fields:
    ruledoc: 4
    test_name: generic_3_1_c
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="{,Ih5k/U:U$Dn0tc{D.=" x="126" y="314"><statement name="query"><block type="according_to"
      id="6*{XL5IEL6c={O}O-`Kz"><value name="rule"><block type="doc_selector" id="+xxQd2N09;L;d(k6RK}r"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_c_section"></mutation><field
      name="doc_part_name">OASA 3.1.c</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="OrbSje@|`+2J^xH)o^_*"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="qualifies_s3_1_c" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">qualifies under s3(1)(c)</field><value name="first_element"><block
      type="variable" id="9b-Ynv$h^k3Ow/3lNArY"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_c_section,  qualifies_s3_1_c(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_resided_in_canada_july'', ''view_cat_person_att_possessed_valid_immigration_visa_july'',
      ''view_cat_person_att_resided_in_canada_after_18_as_of_july'', ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'',
      ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'', ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'',
      ''view_cat_person_att_meets_s3_1_c_i'', ''view_cat_person_att_meets_s3_1_c_ii'',
      ''view_cat_person_att_meets_s3_1_c_iii'', ''view_cat_person_att_may_be_paid_full_monthly_pension'',
      ''view_cat_person_att_qualifies_s3_1_a'', ''view_cat_person_att_qualifies_s3_1_b'',
      ''view_cat_person_att_qualifies_s3_1_c'', ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'',
      ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'', ''view_cat_person_att_has_resided_one_year_prior_to_approval'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 7
  fields:
    ruledoc: 4
    test_name: generic_3_1_b_i
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="3GnJl-qbNhs(}SHR)q.y" x="66" y="255"><statement name="query"><block type="according_to"
      id="V|Kqpu1wW3N@X]BZ|:Hf"><value name="rule"><block type="doc_selector" id="vWJw%|gEeFrqo5n|b2Am"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_b__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="]#.a-}Wtd8g%MGFXb]T}"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_requirement_s3_1_b_i" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence requirements
      of section 3(1)(b)(i)</field><value name="first_element"><block type="variable"
      id="nc)qw8Td8a(^X+qRol0:"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_b__subpara_i_section,  meets_residence_requirement_s3_1_b_i(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_meets_residence_requirement_s3_1_b_i'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'', ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'',
      ''view_cat_person_att_has_resided_one_year_prior_to_approval'', ''view_cat_person_att_resided_40_years_after_18_yoa'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 8
  fields:
    ruledoc: 4
    test_name: generic_3_1_b_ii
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="CLUc$RA|lkd/oQ$y#06*" x="75" y="289"><statement name="query"><block type="according_to"
      id="Ap?}5jKjulG(0}[~7vlr"><value name="rule"><block type="doc_selector" id="=V~L6@i9ogQf%}vZ;T26"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_b__subpara_ii_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.ii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="/q`9QnL0Bx/!q)dA$jlR"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_age_requirement_s3_1_b_ii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the age requirement of section
      3(1)(b)(ii)</field><value name="first_element"><block type="variable" id="P}nbZ%_o74|OPg)p;e)J"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_b__subpara_ii_section,  meets_age_requirement_s3_1_b_ii(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_pensioner_july'', ''view_cat_person_att_resided_in_canada_july'',
      ''view_cat_person_att_possessed_valid_immigration_visa_july'', ''view_cat_person_att_resided_in_canada_after_18_as_of_july'',
      ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'', ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'',
      ''view_cat_person_att_has_resided_one_year_prior_to_approval'', ''view_cat_person_att_resided_40_years_after_18_yoa'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 9
  fields:
    ruledoc: 4
    test_name: generic_3_1_c_i
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="B5rp;*txE]JpuW{.}pCz" x="92" y="321"><statement name="query"><block type="according_to"
      id="kt19IP6c(ws`mVw{fC}J"><value name="rule"><block type="doc_selector" id="oQU0gK!X|xl)(_m:s9h8"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_c__subpara_i_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.i</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="ZkwK/t8,d0Xp;n2+_ybF"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_i" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the non-pensioner requirement of s3(1)(c)(i)</field><value
      name="first_element"><block type="variable" id="/AoJ*5dEV0GGytAzu=7D"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_c__subpara_i_section,  meets_s3_1_c_i(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_resided_in_canada_july'', ''view_cat_person_att_possessed_valid_immigration_visa_july'',
      ''view_cat_person_att_resided_in_canada_after_18_as_of_july'', ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'',
      ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'', ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'',
      ''view_cat_person_att_meets_s3_1_c_i'', ''view_cat_person_att_meets_s3_1_c_ii'',
      ''view_cat_person_att_meets_s3_1_c_iii'', ''view_cat_person_att_may_be_paid_full_monthly_pension'',
      ''view_cat_person_att_qualifies_s3_1_a'', ''view_cat_person_att_qualifies_s3_1_b'',
      ''view_cat_person_att_qualifies_s3_1_c'', ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'',
      ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'', ''view_cat_person_att_has_resided_one_year_prior_to_approval'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 10
  fields:
    ruledoc: 4
    test_name: generic_3_1_c_ii
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="_0LNmTPcoH;=}PVUisM!" x="70" y="263"><statement name="query"><block type="according_to"
      id="Kc+id73F3c4e3WUD@(Ai"><value name="rule"><block type="doc_selector" id="Z^ldlaRK*hDsJ].ZC{Q~"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_c__subpara_ii_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.ii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="oNCP0HB/ay3#*YRr(/mu"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_ii" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the age requirement of s3(1)(c)(ii)</field><value name="first_element"><block
      type="variable" id="H]9QRq8?:@0[9Z$]9`/="><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_c__subpara_ii_section,  meets_s3_1_c_ii(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_resided_in_canada_july'', ''view_cat_person_att_possessed_valid_immigration_visa_july'',
      ''view_cat_person_att_resided_in_canada_after_18_as_of_july'', ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_s3_1_c_i'', ''view_cat_person_att_meets_s3_1_c_ii'',
      ''view_cat_person_att_meets_s3_1_c_iii'', ''view_cat_person_att_may_be_paid_full_monthly_pension'',
      ''view_cat_person_att_qualifies_s3_1_a'', ''view_cat_person_att_qualifies_s3_1_b'',
      ''view_cat_person_att_qualifies_s3_1_c'', ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'',
      ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'', ''view_cat_person_att_has_resided_one_year_prior_to_approval'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 11
  fields:
    ruledoc: 4
    test_name: generic_3_1_b_iii
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id=":Uu[*vSt,LW8=1//bfpd" x="93" y="213"><statement name="query"><block type="according_to"
      id="-g7mwa;2d8*lM@XKB9oH"><value name="rule"><block type="doc_selector" id="dj5TQXPti:6}@)if#Qn?"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_b__subpara_iii_section"></mutation><field
      name="doc_part_name">OASA 3.1.b.iii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="6%dk6gk(Nh71k?a=DU03"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_residence_duration_requirement_s3_1_b_iii" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">meets the residence duration requirement
      of section 3(1)(b)(iii)</field><value name="first_element"><block type="variable"
      id="e4aY+Yd$^5(ibl59x.Xf"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_b__subpara_iii_section,  meets_residence_duration_requirement_s3_1_b_iii(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_resided_in_canada_july'', ''view_cat_person_att_possessed_valid_immigration_visa_july'',
      ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'',
      ''view_cat_person_att_citizen_or_resident_before_approval'', ''view_cat_person_att_citizen_or_resident_before_departure'',
      ''view_cat_person_att_resided_in_canada_after_18_as_of_july'', ''view_cat_person_att_resided_40_years_after_18_yoa'',
      ''view_cat_person_att_pensioner_july'', ''view_cat_person_att_birthdate'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 12
  fields:
    ruledoc: 4
    test_name: generic_3_1_c_iii
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="CCbA=7g95-6zwLTJ1wnD" x="119" y="323"><statement name="query"><block type="according_to"
      id=")EG4r3l!#-e)@l|qFzBW"><value name="rule"><block type="doc_selector" id="GCZRt~kVwl2X#[vLO9!f"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_3__subsec_1__para_c__subpara_iii_section"></mutation><field
      name="doc_part_name">OASA 3.1.c.iii</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="p|u.a5o^gX)1zTQDJ0!M"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_s3_1_c_iii" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies the residency requirement of s3(1)(c)(iii)</field><value
      name="first_element"><block type="variable" id="L@6XH{5E*!U){5CbYyU="><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_3__subsec_1__para_c__subpara_iii_section,  meets_s3_1_c_iii(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_resided_in_canada_july'', ''view_cat_person_att_possessed_valid_immigration_visa_july'',
      ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'', ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'',
      ''view_cat_person_att_has_resided_one_year_prior_to_approval'', ''view_cat_person_att_satisfies_4_1_a'',
      ''view_cat_person_att_satisfies_4_1_b'', ''view_cat_person_att_citizen_or_resident_before_approval'',
      ''view_cat_person_att_citizen_or_resident_before_departure'', ''view_cat_person_att_resided_in_canada_after_18_as_of_july'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 13
  fields:
    ruledoc: 4
    test_name: generic_4_1
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="Kri=g;hPM1VB.r#pLRqV" x="59" y="324"><statement name="query"><block type="according_to"
      id=".}@2*BF7B8nC-6Mf{6*U"><value name="rule"><block type="doc_selector" id="!N.v_=IG+xBXi4Aq.f3E"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1_section"></mutation><field
      name="doc_part_name">OASA 4.1</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="Q}+~cYze(ntIfkD3Em^5"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="may_be_paid_full_monthly_pension" attributetype="boolean"></mutation><field
      name="prefix">a full monthly pension may be paid to</field><field name="postfix"></field><value
      name="first_element"><block type="variable" id=":0tuG,V=2K3!z-m!gcaA"><field
      name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_4__subsec_1_section,  may_be_paid_full_monthly_pension(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_birthdate'', ''view_cat_person_att_resided_in_canada_july'',
      ''view_cat_person_att_possessed_valid_immigration_visa_july'', ''view_cat_person_att_resided_in_canada_after_18_as_of_july'',
      ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'', ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'',
      ''view_cat_person_att_has_resided_one_year_prior_to_approval'', ''view_cat_person_att_resided_40_years_after_18_yoa'',
      ''view_cat_person_att_satisfies_4_1_a'', ''view_cat_person_att_satisfies_4_1_b'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 14
  fields:
    ruledoc: 4
    test_name: generic_4_1_a
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="#(Tg!n]s7a-UBCVm0LG`" x="96" y="267"><statement name="query"><block type="according_to"
      id="4d]@YtJ2U`3$pGe$nMH+"><value name="rule"><block type="doc_selector" id="x-gQTnI`F4_ala+}acV7"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1__para_a_section"></mutation><field
      name="doc_part_name">OASA 4.1.a</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="3=Cx8vw+f!0-;R*5%CM]"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="satisfies_4_1_a" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies section 4(1)(a)</field><value name="first_element"><block
      type="variable" id="08x{74;xgtF):%=wIGf]"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_4__subsec_1__para_a_section,  satisfies_4_1_a(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_pensioner_july'', ''view_cat_person_att_birthdate'',
      ''view_cat_person_att_resided_in_canada_july'', ''view_cat_person_att_possessed_valid_immigration_visa_july'',
      ''view_cat_person_att_resided_in_canada_after_18_as_of_july'', ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'',
      ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'', ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'',
      ''view_cat_person_att_meets_s3_1_c_i'', ''view_cat_person_att_meets_s3_1_c_ii'',
      ''view_cat_person_att_meets_s3_1_c_iii'', ''view_cat_person_att_may_be_paid_full_monthly_pension'',
      ''view_cat_person_att_qualifies_s3_1_a'', ''view_cat_person_att_qualifies_s3_1_b'',
      ''view_cat_person_att_qualifies_s3_1_c'', ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'',
      ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'', ''view_cat_person_att_has_resided_one_year_prior_to_approval'',
      ''view_cat_person_att_resided_40_years_after_18_yoa'', ''view_cat_person_att_satisfies_4_1_a'',
      ''view_cat_person_att_satisfies_4_1_b'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 15
  fields:
    ruledoc: 4
    test_name: generic_4_1_b
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="(9ydD85Yn#_BVeS!)N;l" x="134" y="276"><statement name="query"><block type="according_to"
      id="WZiA6A*=yX+7^GwjjN2/"><value name="rule"><block type="doc_selector" id="ZzD/ENAIH;pbFnD~)LIK"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1__para_b_section"></mutation><field
      name="doc_part_name">OASA 4.1.b</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id=":[|N4Y/MQ=Hh5Rt6zB(C"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="satisfies_4_1_b" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">satisfies section 4(1)(b)</field><value name="first_element"><block
      type="variable" id="qfDhJ9@{f**zMpU7gSH/"><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- according_to(sec_4__subsec_1__para_b_section,  satisfies_4_1_b(Person)).
    tutorial: ''
    view: '[''view_cat_person_att_satisfies_4_1_b'', ''view_cat_person_att_satisfies_4_1_a'',
      ''view_cat_person_att_resided_40_years_after_18_yoa'', ''view_cat_person_att_pensioner_july'',
      ''view_cat_person_att_birthdate'', ''view_cat_person_att_meets_age_requirement_s3_1_b_ii'',
      ''view_cat_person_att_meets_residence_duration_requirement_s3_1_b_iii'', ''view_cat_person_att_meets_s3_1_c_i'',
      ''view_cat_person_att_meets_s3_1_c_ii'', ''view_cat_person_att_meets_s3_1_c_iii'',
      ''view_cat_person_att_may_be_paid_full_monthly_pension'', ''view_cat_person_att_qualifies_s3_1_a'',
      ''view_cat_person_att_qualifies_s3_1_b'', ''view_cat_person_att_qualifies_s3_1_c'',
      ''view_cat_person_att_resided_in_canada_10_years_prior_to_approval'', ''view_cat_person_att_meets_aggregate_residence_requirement_s3_1_b_iii'',
      ''view_cat_person_att_has_resided_one_year_prior_to_approval'', ''view_cat_person_att_meets_residence_requirement_s3_1_b_i'',
      ''view_cat_person_att_resided_in_canada_after_18_as_of_july'', ''view_cat_person_att_possessed_valid_immigration_visa_july'',
      ''view_cat_person_att_resided_in_canada_july'']'
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 16
  fields:
    ruledoc: 4
    test_name: generic_eligible
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="t2fN+~va](ApjzsD`Bay" x="80" y="316"><statement name="query"><block type="holds"
      id="i^|s5ga$M2w6hHV4nNN`"><statement name="statement"><block type="unary_attribute_selector"
      id="VS5[yqnQPK|swIpR-7z3"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="variable" id="@*.yaV{mq4o0[tUO6r=("><field name="variable_name">Person</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- legally_holds(_,  may_be_paid_full_monthly_pension(Person)).
    tutorial: ''
    view: ''
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 17
  fields:
    ruledoc: 4
    test_name: true_or_false
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="r?$kLlAR1KCd=TwIk;gB" x="50" y="128"><statement name="statements"><block
      type="object_declaration" id=")tI7=MZUJZFB!rHp?d^X"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">bob</field><field name="postfix">is a person</field></block></statement></block><block
      type="query" id="7~=$P3uxU$Jd2GaXd.Fj" x="55" y="233"><statement name="query"><block
      type="holds" id="xAs56KhhT`F/T0.}Xu%d"><statement name="statement"><block type="unary_attribute_selector"
      id="}9}8a#v[|Z%=$p[2,WFk"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="object_selector" id="^!IB[_PR6-#GBw2b0}6f"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="bob"></mutation><field name="object_name">bob</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'person(bob).


      ?- legally_holds(_,  may_be_paid_full_monthly_pension(bob)).'
    tutorial: ''
    view: ''
    fact_scenario: ''
- model: blawx.blawxtest
  pk: 18
  fields:
    ruledoc: 4
    test_name: search
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="jS[=lqTA3BIxhGNpe%`m" x="62" y="185"><statement name="query"><block type="holds"
      id="j.e=GHq(C)Qa,{}?H--T"><statement name="statement"><block type="unary_attribute_selector"
      id="|i?0by2+cWm:{UzvA0RB"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="may_be_paid_full_monthly_pension"
      attributetype="boolean"></mutation><field name="prefix">a full monthly pension
      may be paid to</field><field name="postfix"></field><value name="first_element"><block
      type="variable" id="4Jr:7pgs(Eo4a!)OD6U%"><field name="variable_name">Someone</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- legally_holds(_,  may_be_paid_full_monthly_pension(Someone)).
    tutorial: ''
    view: ''
    fact_scenario: ''
