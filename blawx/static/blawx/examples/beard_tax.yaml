- model: blawx.ruledoc
  pk: 4
  fields:
    ruledoc_name: Beard Tax Act
    rule_text: "Beard Tax Act\r\n\r\n1. In this Act, beard means any facial hair no
      shorter than 5 millimetres in\r\nlength that:\r\n  (a) occurs on or below the
      chin, or\r\n  (b) exists in an uninterrupted line from the front of one ear
      to the front of the other ear below the nose."
    scasp_encoding: ''
    tutorial: ''
    owner: 3
    published: false
- model: blawx.workspace
  pk: 21
  fields:
    ruledoc: 4
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 22
  fields:
    ruledoc: 4
    workspace_name: sec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="(^5.:,lX5N1?~UIArJEP" x="29" y="38"><statement name="statements"><block
      type="new_category_declaration" id="|=B6BNmxSi+prNUp-rdD"><field name="category_name">person</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a person</field><next><block type="new_attribute_declaration" id="(Wls!?ZYzyZDWatxBw$A"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person" attribute_type="boolean"></mutation><field
      name="category_name">person</field><field name="attribute_name">bearded</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">is bearded</field><next><block
      type="new_attribute_declaration" id="3aO{K]Rb^U,=[%2ECo2M"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="number"></mutation><field name="category_name">person</field><field
      name="attribute_name">facial_hair_length_mm</field><field name="attribute_type">number</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s facial hair is</field><field name="second_element">value</field><field
      name="postfix">mm in length</field></block></next></block></next></block></statement></block><block
      type="attributed_rule" id="K.[}P`WdvcdoK?mA@b9J" x="86" y="334"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="object_category"
      id="sIrt]ZDclLrocANEPlD="><value name="object"><block type="variable" id="@sSvBMG[VcWO8@_zh%Fo"><field
      name="variable_name">Person</field></block></value><value name="category"><block
      type="category_selector" id="ZLtx078Ed2L*GUihU!=`"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person"></mutation><field name="category_name">person</field></block></value><next><block
      type="numerical_constraint" id="SY,(ZLN9ol:E:sYhNU;%"><field name="operator">gte</field><value
      name="first_comparator"><block type="variable" id="{0w]wA3A*,.lLirePQy_"><field
      name="variable_name">Length</field></block></value><value name="second_comparator"><block
      type="number_value" id="D^.NlR=L6qXj]=deI;UF"><field name="value">5</field></block></value><next><block
      type="attribute_selector" id="sq3=pGTwqjZY0Oy7x%6y"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="facial_hair_length_mm" attributetype="# Number" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">'s facial hair is</field><field name="postfix">mm
      in length</field><value name="first_element"><block type="variable" id="9Es;L_1yx,Oj~lN#}Qn#"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="UT49/[{%Fh7(=7Sd}bTH"><field name="variable_name">Length</field></block></value><next><block
      type="according_to" id="44Yw/xCH|sszoe$ygNFJ"><value name="rule"><block type="doc_selector"
      id="Ocmqu*3QN`0gXC:B=E}h"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1__para_a_section"></mutation><field
      name="doc_part_name">BTA 1.a</field></block></value><statement name="statement"><block
      type="unary_attribute_selector" id="}.f?BliB/2f~kra)TAe%"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="qualifies_s1a" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">qualifies under section 1 a</field><value name="first_element"><block
      type="variable" id="jaO5leIv(9J!nFG/D%T:"><field name="variable_name">Person</field></block></value></block></statement></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="!HC!]P/pt-,4rW-.gmSm"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1_section"></mutation><field
      name="doc_part_name">BTA 1</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="NX*[PdD]wX@UXD2q-zDp"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="bearded" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is bearded</field><value name="first_element"><block type="variable"
      id="}+SnwvMF(|PJAhu0N|9#"><field name="variable_name">Person</field></block></value></block></statement></block><block
      type="attributed_rule" id="-h#^sG2PVYaoyyd[FXgH" x="76" y="710"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="object_category"
      id=")U2ah:Fv{A0~*S3x~KVo"><value name="object"><block type="variable" id="zQpi:]w.sHQx$he#jT7X"><field
      name="variable_name">Person</field></block></value><value name="category"><block
      type="category_selector" id="sZKLNk_%eIj}YbN~G/u^"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person"></mutation><field name="category_name">person</field></block></value><next><block
      type="numerical_constraint" id="1{T_t2j*kL]:KAlMB1,z"><field name="operator">gte</field><value
      name="first_comparator"><block type="variable" id="rsY@}?slvgDXCfDKe4;4"><field
      name="variable_name">Length</field></block></value><value name="second_comparator"><block
      type="number_value" id=")X7C+_CNa{2C%(cSV`+A"><field name="value">5</field></block></value><next><block
      type="attribute_selector" id="GdEV!CumOO^MX.+=Ct~|"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="facial_hair_length_mm" attributetype="# Number" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">'s facial hair is</field><field name="postfix">mm
      in length</field><value name="first_element"><block type="variable" id="[Cy~EQF^Pa2PO7T_w{tl"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="8Y6F25Qlr7vCcOqSy4aR"><field name="variable_name">Length</field></block></value><next><block
      type="unary_attribute_selector" id="q1d0l97AX;vNq^)o_LI)"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="qualifies_s1b" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">qualifies under section 1 b</field><value name="first_element"><block
      type="variable" id="IvORAYJ%}sOU21C(Z6Fh"><field name="variable_name">Person</field></block></value></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="FD$324Nk`eT_H}luXVdg"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1_section"></mutation><field
      name="doc_part_name">BTA 1</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="(m5[e/nkwWP15Cy(U5P]"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="bearded" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is bearded</field><value name="first_element"><block type="variable"
      id="PmZksLyP)}6DV3/SS~Ti"><field name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_category(person).

      blawx_category_nlg(person,"","is a person").

      #pred person(X) :: ''@(X) is a person''.

      #pred holds(user,person,X) :: ''it is provided as a fact that @(X) is a person''.

      #pred holds(user,-person,X) :: ''it is provided as a fact that it is not the
      case that @(X) is a person''.

      #pred holds(Z,person,X) :: ''the conclusion in @(Z) that @(X) is a person holds''.

      #pred holds(Z,-person,X) :: ''the conclusion in @(Z) that it is not the case
      that @(X) is a person holds''.

      #pred according_to(Z,person,X) :: ''according to @(Z), @(X) is a person''.

      #pred according_to(Z,-person,X) :: ''according to @(Z), it is not the case that
      @(X) is a person''.

      #pred blawx_defeated(Z,person,X) :: ''the conclusion in @(Z) that @(X) is a
      person is defeated''.

      #pred blawx_defeated(Z,-person,X) :: ''the conclusion in @(Z) that @(X) is a
      person is defeated''.

      person(X) :- holds(_,person,X).

      -person(X) :- holds(_,-person,X).

      blawx_attribute(person,bearded,boolean).

      blawx_attribute_nlg(bearded,not_applicable,"",not_applicable,"is bearded").

      #pred bearded(X) :: ''@(X) is bearded''.

      #pred holds(user,bearded,X) :: ''it is provided as a fact that @(X) is bearded''.

      #pred holds(user,-bearded,X) :: ''it is provided as a fact that it is not the
      case that @(X) is bearded''.

      #pred holds(Z,bearded,X) :: ''the conclusion in @(Z) that @(X) is bearded holds''.

      #pred holds(Z,-bearded,X) :: ''the conclusion in @(Z) that it is not the case
      that @(X) is bearded holds''.

      #pred according_to(Z,bearded,X) :: ''according to @(Z), @(X) is bearded''.

      #pred according_to(Z,-bearded,X) :: ''according to @(Z), it is not the case
      that @(X) is bearded''.

      #pred blawx_defeated(Z,bearded,X) :: ''the conclusion in @(Z) that @(X) is bearded
      is defeated''.

      #pred blawx_defeated(Z,-bearded,X) :: ''the conclusion in @(Z) that @(X) is
      bearded is defeated''.

      bearded(X) :- holds(_,bearded,X).

      -bearded(X) :- holds(_,-bearded,X).

      blawx_attribute(person,facial_hair_length_mm,number).

      blawx_attribute_nlg(facial_hair_length_mm,ov,"","''s facial hair is","mm in
      length").

      #pred facial_hair_length_mm(X,Y) :: ''@(X) \''s facial hair is @(Y) mm in length''.

      #pred holds(user,facial_hair_length_mm,X,Y) :: ''it is provided as a fact that
      @(X) \''s facial hair is @(Y) mm in length''.

      #pred holds(user,-facial_hair_length_mm,X,Y) :: ''it is provided as a fact that
      it is not the case that @(X) \''s facial hair is @(Y) mm in length''.

      #pred holds(Z,facial_hair_length_mm,X,Y) :: ''the conclusion in @(Z) that @(X)
      \''s facial hair is @(Y) mm in length holds''.

      #pred holds(Z,-facial_hair_length_mm,X,Y) :: ''the conclusion in @(Z) that it
      is not the case that @(X) \''s facial hair is @(Y) mm in length holds''.

      #pred according_to(Z,facial_hair_length_mm,X,Y) :: ''according to @(Z), @(X)
      \''s facial hair is @(Y) mm in length''.

      #pred according_to(Z,-facial_hair_length_mm,X,Y) :: ''according to @(Z), it
      is not the case that @(X) \''s facial hair is @(Y) mm in length''.

      #pred blawx_defeated(Z,facial_hair_length_mm,X,Y) :: ''the conclusion in @(Z)
      that @(X) \''s facial hair is @(Y) mm in length is defeated''.

      #pred blawx_defeated(Z,-facial_hair_length_mm,X,Y) :: ''the conclusion in @(Z)
      that @(X) \''s facial hair is @(Y) mm in length is defeated''.

      facial_hair_length_mm(X,Y) :- holds(_,facial_hair_length_mm,X,Y).

      -facial_hair_length_mm(X,Y) :- holds(_,-facial_hair_length_mm,X,Y).


      according_to(sec_1_section,bearded,Person) :- person(Person),

      Length #>= 5,

      facial_hair_length_mm(Person,Length),

      according_to(sec_1__para_a_section,qualifies_s1a,Person).


      holds(sec_1_section,bearded,Person) :- according_to(sec_1_section,bearded,Person).


      according_to(sec_1_section,bearded,Person) :- person(Person),

      Length #>= 5,

      facial_hair_length_mm(Person,Length),

      qualifies_s1b(Person).


      holds(sec_1_section,bearded,Person) :- according_to(sec_1_section,bearded,Person).'
- model: blawx.workspace
  pk: 23
  fields:
    ruledoc: 4
    workspace_name: sec_1__para_a_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="(^5.:,lX5N1?~UIArJEP" x="55" y="110"><statement name="statements"><block
      type="new_attribute_declaration" id="!YlDD-GLrJe/Pxze3_%}"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">facial_hair_on_chin</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">'s facial hair is on the chin</field><next><block type="new_attribute_declaration"
      id="aVWC|q-t]Tg;*94oHBk@"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">facial_hair_below_chin</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s facial hair </field><field name="second_element">value</field><field
      name="postfix">'s facial hair is below the chin</field><next><block type="new_attribute_declaration"
      id="/CTn7b%:u9OwzJ%@x./K"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">qualifies_s1a</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">qualifies under section 1 a</field></block></next></block></next></block></statement></block><block
      type="attributed_rule" id="7?%2vGdA|KnfrZmk+$GS" x="58" y="415"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="unary_attribute_selector"
      id="acY_?~r_XPF)uDeaoo[g"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="facial_hair_on_chin"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">'s
      facial hair is on the chin</field><value name="first_element"><block type="variable"
      id="O[R`xyfiIHY6q%MGr6+:"><field name="variable_name">Person</field></block></value></block></statement><value
      name="source"><block type="doc_selector" id="5AvZzp}vGBo^]COoUBlw"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1__para_a_section"></mutation><field
      name="doc_part_name">BTA 1.a</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="RqOe]ZS]yeQ;i2wg`b!y"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="qualifies_s1a" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">qualifies under section 1 a</field><value name="first_element"><block
      type="variable" id="]`*{A)#%/p/.80o)uq3;"><field name="variable_name">Person</field></block></value></block></statement></block><block
      type="attributed_rule" id="#{:q(xFp5hseTB[q|/~y" x="62" y="613"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="unary_attribute_selector"
      id="$F^9JXICH!}NVM%kpP56"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="facial_hair_below_chin"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">'s
      facial hair is below the chin</field><value name="first_element"><block type="variable"
      id="zmbB#)O{3Du+nCoHR1Z7"><field name="variable_name">Person</field></block></value></block></statement><value
      name="source"><block type="doc_selector" id="-qs8[S3/bAj@V(ZG`$U}"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1__para_a_section"></mutation><field
      name="doc_part_name">BTA 1.a</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="_+ixlUatP_rK_QzEO8$d"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="qualifies_s1a" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">qualifies under section 1 a</field><value name="first_element"><block
      type="variable" id="v[)}mLA`/`9M8(]p/q6("><field name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,facial_hair_on_chin,boolean).

      blawx_attribute_nlg(facial_hair_on_chin,not_applicable,"",not_applicable,"''s
      facial hair is on the chin").

      #pred facial_hair_on_chin(X) :: ''@(X) \''s facial hair is on the chin''.

      #pred holds(user,facial_hair_on_chin,X) :: ''it is provided as a fact that @(X)
      \''s facial hair is on the chin''.

      #pred holds(user,-facial_hair_on_chin,X) :: ''it is provided as a fact that
      it is not the case that @(X) \''s facial hair is on the chin''.

      #pred holds(Z,facial_hair_on_chin,X) :: ''the conclusion in @(Z) that @(X) \''s
      facial hair is on the chin holds''.

      #pred holds(Z,-facial_hair_on_chin,X) :: ''the conclusion in @(Z) that it is
      not the case that @(X) \''s facial hair is on the chin holds''.

      #pred according_to(Z,facial_hair_on_chin,X) :: ''according to @(Z), @(X) \''s
      facial hair is on the chin''.

      #pred according_to(Z,-facial_hair_on_chin,X) :: ''according to @(Z), it is not
      the case that @(X) \''s facial hair is on the chin''.

      #pred blawx_defeated(Z,facial_hair_on_chin,X) :: ''the conclusion in @(Z) that
      @(X) \''s facial hair is on the chin is defeated''.

      #pred blawx_defeated(Z,-facial_hair_on_chin,X) :: ''the conclusion in @(Z) that
      @(X) \''s facial hair is on the chin is defeated''.

      facial_hair_on_chin(X) :- holds(_,facial_hair_on_chin,X).

      -facial_hair_on_chin(X) :- holds(_,-facial_hair_on_chin,X).

      blawx_attribute(person,facial_hair_below_chin,boolean).

      blawx_attribute_nlg(facial_hair_below_chin,not_applicable,"",not_applicable,"''s
      facial hair is below the chin").

      #pred facial_hair_below_chin(X) :: ''@(X) \''s facial hair is below the chin''.

      #pred holds(user,facial_hair_below_chin,X) :: ''it is provided as a fact that
      @(X) \''s facial hair is below the chin''.

      #pred holds(user,-facial_hair_below_chin,X) :: ''it is provided as a fact that
      it is not the case that @(X) \''s facial hair is below the chin''.

      #pred holds(Z,facial_hair_below_chin,X) :: ''the conclusion in @(Z) that @(X)
      \''s facial hair is below the chin holds''.

      #pred holds(Z,-facial_hair_below_chin,X) :: ''the conclusion in @(Z) that it
      is not the case that @(X) \''s facial hair is below the chin holds''.

      #pred according_to(Z,facial_hair_below_chin,X) :: ''according to @(Z), @(X)
      \''s facial hair is below the chin''.

      #pred according_to(Z,-facial_hair_below_chin,X) :: ''according to @(Z), it is
      not the case that @(X) \''s facial hair is below the chin''.

      #pred blawx_defeated(Z,facial_hair_below_chin,X) :: ''the conclusion in @(Z)
      that @(X) \''s facial hair is below the chin is defeated''.

      #pred blawx_defeated(Z,-facial_hair_below_chin,X) :: ''the conclusion in @(Z)
      that @(X) \''s facial hair is below the chin is defeated''.

      facial_hair_below_chin(X) :- holds(_,facial_hair_below_chin,X).

      -facial_hair_below_chin(X) :- holds(_,-facial_hair_below_chin,X).

      blawx_attribute(person,qualifies_s1a,boolean).

      blawx_attribute_nlg(qualifies_s1a,not_applicable,"",not_applicable,"qualifies
      under section 1 a").

      #pred qualifies_s1a(X) :: ''@(X) qualifies under section 1 a''.

      #pred holds(user,qualifies_s1a,X) :: ''it is provided as a fact that @(X) qualifies
      under section 1 a''.

      #pred holds(user,-qualifies_s1a,X) :: ''it is provided as a fact that it is
      not the case that @(X) qualifies under section 1 a''.

      #pred holds(Z,qualifies_s1a,X) :: ''the conclusion in @(Z) that @(X) qualifies
      under section 1 a holds''.

      #pred holds(Z,-qualifies_s1a,X) :: ''the conclusion in @(Z) that it is not the
      case that @(X) qualifies under section 1 a holds''.

      #pred according_to(Z,qualifies_s1a,X) :: ''according to @(Z), @(X) qualifies
      under section 1 a''.

      #pred according_to(Z,-qualifies_s1a,X) :: ''according to @(Z), it is not the
      case that @(X) qualifies under section 1 a''.

      #pred blawx_defeated(Z,qualifies_s1a,X) :: ''the conclusion in @(Z) that @(X)
      qualifies under section 1 a is defeated''.

      #pred blawx_defeated(Z,-qualifies_s1a,X) :: ''the conclusion in @(Z) that @(X)
      qualifies under section 1 a is defeated''.

      qualifies_s1a(X) :- holds(_,qualifies_s1a,X).

      -qualifies_s1a(X) :- holds(_,-qualifies_s1a,X).


      according_to(sec_1__para_a_section,qualifies_s1a,Person) :- facial_hair_on_chin(Person).


      holds(sec_1__para_a_section,qualifies_s1a,Person) :- according_to(sec_1__para_a_section,qualifies_s1a,Person).


      according_to(sec_1__para_a_section,qualifies_s1a,Person) :- facial_hair_below_chin(Person).


      holds(sec_1__para_a_section,qualifies_s1a,Person) :- according_to(sec_1__para_a_section,qualifies_s1a,Person).'
- model: blawx.workspace
  pk: 24
  fields:
    ruledoc: 4
    workspace_name: sec_1__para_b_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="(^5.:,lX5N1?~UIArJEP" x="59" y="112"><statement name="statements"><block
      type="new_attribute_declaration" id="iS7L~wUVVw%#L$!ECPTK"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">facial_hair_continuous</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">'s facial hair is ear to ear below the nose</field><next><block
      type="new_attribute_declaration" id="zgSWFz3LffbMH2O_kz4F"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">qualifies_s1b</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">qualifies under section 1 b</field></block></next></block></statement></block><block
      type="attributed_rule" id="G|+h5;6TOuR~p,eHXe^d" x="54" y="338"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="unary_attribute_selector"
      id="I9BCMNWXwD]%|D7j7q`1"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="facial_hair_continuous"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">'s
      facial hair is ear to ear below the nose</field><value name="first_element"><block
      type="variable" id="O[R`xyfiIHY6q%MGr6+:"><field name="variable_name">Person</field></block></value></block></statement><value
      name="source"><block type="doc_selector" id="nHr1xdgRg;PruXlC9#WH"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1__para_b_section"></mutation><field
      name="doc_part_name">BTA 1.b</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="@[lB9QRb//t4]j#re7r$"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="qualifies_s1b" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">qualifies under section 1 b</field><value name="first_element"><block
      type="variable" id="oMOx1nXegE|@{tC78ChY"><field name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: 'blawx_attribute(person,facial_hair_continuous,boolean).

      blawx_attribute_nlg(facial_hair_continuous,not_applicable,"",not_applicable,"''s
      facial hair is ear to ear below the nose").

      #pred facial_hair_continuous(X) :: ''@(X) \''s facial hair is ear to ear below
      the nose''.

      #pred holds(user,facial_hair_continuous,X) :: ''it is provided as a fact that
      @(X) \''s facial hair is ear to ear below the nose''.

      #pred holds(user,-facial_hair_continuous,X) :: ''it is provided as a fact that
      it is not the case that @(X) \''s facial hair is ear to ear below the nose''.

      #pred holds(Z,facial_hair_continuous,X) :: ''the conclusion in @(Z) that @(X)
      \''s facial hair is ear to ear below the nose holds''.

      #pred holds(Z,-facial_hair_continuous,X) :: ''the conclusion in @(Z) that it
      is not the case that @(X) \''s facial hair is ear to ear below the nose holds''.

      #pred according_to(Z,facial_hair_continuous,X) :: ''according to @(Z), @(X)
      \''s facial hair is ear to ear below the nose''.

      #pred according_to(Z,-facial_hair_continuous,X) :: ''according to @(Z), it is
      not the case that @(X) \''s facial hair is ear to ear below the nose''.

      #pred blawx_defeated(Z,facial_hair_continuous,X) :: ''the conclusion in @(Z)
      that @(X) \''s facial hair is ear to ear below the nose is defeated''.

      #pred blawx_defeated(Z,-facial_hair_continuous,X) :: ''the conclusion in @(Z)
      that @(X) \''s facial hair is ear to ear below the nose is defeated''.

      facial_hair_continuous(X) :- holds(_,facial_hair_continuous,X).

      -facial_hair_continuous(X) :- holds(_,-facial_hair_continuous,X).

      blawx_attribute(person,qualifies_s1b,boolean).

      blawx_attribute_nlg(qualifies_s1b,not_applicable,"",not_applicable,"qualifies
      under section 1 b").

      #pred qualifies_s1b(X) :: ''@(X) qualifies under section 1 b''.

      #pred holds(user,qualifies_s1b,X) :: ''it is provided as a fact that @(X) qualifies
      under section 1 b''.

      #pred holds(user,-qualifies_s1b,X) :: ''it is provided as a fact that it is
      not the case that @(X) qualifies under section 1 b''.

      #pred holds(Z,qualifies_s1b,X) :: ''the conclusion in @(Z) that @(X) qualifies
      under section 1 b holds''.

      #pred holds(Z,-qualifies_s1b,X) :: ''the conclusion in @(Z) that it is not the
      case that @(X) qualifies under section 1 b holds''.

      #pred according_to(Z,qualifies_s1b,X) :: ''according to @(Z), @(X) qualifies
      under section 1 b''.

      #pred according_to(Z,-qualifies_s1b,X) :: ''according to @(Z), it is not the
      case that @(X) qualifies under section 1 b''.

      #pred blawx_defeated(Z,qualifies_s1b,X) :: ''the conclusion in @(Z) that @(X)
      qualifies under section 1 b is defeated''.

      #pred blawx_defeated(Z,-qualifies_s1b,X) :: ''the conclusion in @(Z) that @(X)
      qualifies under section 1 b is defeated''.

      qualifies_s1b(X) :- holds(_,qualifies_s1b,X).

      -qualifies_s1b(X) :- holds(_,-qualifies_s1b,X).


      according_to(sec_1__para_b_section,qualifies_s1b,Person) :- facial_hair_continuous(Person).


      holds(sec_1__para_b_section,qualifies_s1b,Person) :- according_to(sec_1__para_b_section,qualifies_s1b,Person).'
- model: blawx.blawxtest
  pk: 9
  fields:
    ruledoc: 4
    test_name: are_they_bearded
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="oKTTPr8cFQ4jJLk|pBs]" x="95" y="187"><statement name="query"><block type="unary_attribute_selector"
      id="|Q6cY}:41{#ug^9`A@GZ"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="bearded"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">is
      bearded</field><value name="first_element"><block type="variable" id="1Yiokzjr!U)`JJ|*BHb/"><field
      name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: ?- bearded(Person).
    tutorial: ''
    view: ''
    fact_scenario: ''
